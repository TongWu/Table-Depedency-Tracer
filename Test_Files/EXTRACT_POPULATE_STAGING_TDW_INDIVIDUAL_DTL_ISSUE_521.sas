/*****************************************************************************
* Job for Issue 521 missing ID from Feb 2021                                 *
* 20241030 - modified to insert records directly to target table for jan 2021*
 *****************************************************************************/

/**************************************************************************** 
 * Job:             EXTRACT_SOURCE_ST_TDW_INDIVIDUAL_DTL  * 
 * Description:     Version 1.0 (Baseline)Version 1.1 (Update due to        * 
 *                  changes in ST_TDW_INDIVIDUAL_DTL table structure - CR   * 
 *                   17)                                                    * 
 *                                                                          * 
 * Metadata Server:                                  * 
 * Port:                                                                * 
 * Location:        /ADMS_UDP/ExtractSource                                 * 
 *                                                                          * 
 * Server:          SASDI                                  * 
 *                                                                          * 
 * Source Table:    TDW_INDIVIDUAL_DTL -                   * 
 *                   udp_src.TDW_INDIVIDUAL_DTL                             * 
 * Target Table:    DWER_TDW_INDIVIDUAL_DTL -              * 
 *                   UDPADMS.DWER_TDW_INDIVIDUAL_DTL                        * 
 *                                                                          * 
 * Generated on:    Monday, 3 August, 2020 8:57:09 AM SGT                   * 
 * Generated by:                                               * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5TM814S.);
%let etls_jobName = %nrquote(EXTRACT_SOURCE_ST_TDW_INDIVIDUAL_DTL);
%let etls_userID = %nrquote(@);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%let syscc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */ 
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASDI);
%let metaPort       = %nrquote(8565);
%let metaServer     = %nrquote(NESAS01R.IRASOR.GOV.SG);

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%udp_stg_filter;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Extract                               A5TM814S.BP0012WO * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    TDW_INDIVIDUAL_DTL -                  A5TM814S.BH000MH6 * 
 *                   udp_src.TDW_INDIVIDUAL_DTL                             * 
 * Target Table:    DWER_TDW_INDIVIDUAL_DTL -             A5TM814S.BH000LIZ * 
 *                   UDPADMS.DWER_TDW_INDIVIDUAL_DTL                        * 
 *==========================================================================*/ 

%let transformID = %quote(A5TM814S.BP0012WO);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(udp_src.TDW_INDIVIDUAL_DTL); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = UDPADMS nolist nowarn memtype = (data view);
   delete DWER_TDW_INDIVIDUAL_DTL;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table UDPADMS.DWER_TDW_INDIVIDUAL_DTL as
      select
         ID_INTERNAL   
            format = 14.
            informat = 14.
            label = 'ID_INTERNAL',
         CD_COUNTRY   
            label = 'CD_COUNTRY',
         CD_EDUCATION_LVL   
            label = 'CD_EDUCATION_LVL',
         CD_EMPLOYMENT   
            label = 'CD_EMPLOYMENT',
         CD_NATIONAL_SRV   
            label = 'CD_NATIONAL_SRV',
         CD_NATIONALITY   
            label = 'CD_NATIONALITY',
         CD_RACE   
            label = 'CD_RACE',
         CD_GENDER   
            label = 'CD_GENDER',
         IN_EDB_SCHEME   
            label = 'IN_EDB_SCHEME',
         DT_AUDIT_BEGIN   
            label = 'DT_AUDIT_BEGIN',
         DT_BIRTH   
            label = 'DT_BIRTH',
         DT_CESSATION   
            label = 'DT_CESSATION',
         DT_DEPARTURE   
            label = 'DT_DEPARTURE',
         DT_DEATH   
            label = 'DT_DEATH',
         DT_EFFECTIVE_NOC   
            label = 'DT_EFFECTIVE_NOC',
         DT_END   
            label = 'DT_END',
         DT_HANDICAP   
            label = 'DT_HANDICAP',
         TS_LAST_UPDATE   
            format = DATETIME22.3
            informat = DATETIME22.3
            label = 'TS_LAST_UPDATE',
         CD_MARITAL_STATUS   
            label = 'CD_MARITAL_STATUS',
         IN_DOB_COMPLETE   
            label = 'IN_DOB_COMPLETE',
         CD_UPDATE_SOURCE   
            label = 'CD_UPDATE_SOURCE',
         CD_UPDATE_REASON   
            label = 'CD_UPDATE_REASON',
         ID_UPDATED_BY   
            label = 'ID_UPDATED_BY',
         CD_PREF_LANG   
            label = 'CD_PREF_LANG',
         CD_MARITAL_OVER   
            label = 'CD_MARITAL_OVER',
         CD_PROFESSIONAL   
            label = 'CD_PROFESSIONAL',
         DT_CITIZEN_APPR   
            label = 'DT_CITIZEN_APPR',
         DT_CITIZEN_REVOKE   
            label = 'DT_CITIZEN_REVOKE',
         DT_CPF_APPROVAL   
            label = 'DT_CPF_APPROVAL',
         DT_MARITAL_STATUS   
            label = 'DT_MARITAL_STATUS',
         DT_PR_APPROVAL   
            label = 'DT_PR_APPROVAL',
         DT_PR_REVOCATION   
            label = 'DT_PR_REVOCATION',
         IN_TAXPAYING   
            label = 'IN_TAXPAYING',
         IN_RECEIVER_PPTY   
            label = 'IN_RECEIVER_PPTY',
         CD_TRADE   
            label = 'CD_TRADE',
         IN_EMPLOYER   
            label = 'IN_EMPLOYER',
         IN_AUTH_MES   
            label = 'IN_AUTH_MES',
         IN_ATTEND_GSTCLASS   
            label = 'IN_ATTEND_GSTCLASS',
         CD_NOR_STATUS   
            label = 'CD_NOR_STATUS',
         DT_EFFECTIVE_NOR   
            label = 'DT_EFFECTIVE_NOR',
         DT_END_NOR   
            label = 'DT_END_NOR',
         TS_LAST_UPDATE_NOR   
            format = DATETIME22.3
            informat = DATETIME22.3
            label = 'TS_LAST_UPDATE_NOR',
         DT_LAST_EXTRACT   
            label = 'DT_LAST_EXTRACT'
   from &SYSLAST
      (&udp_stg_filter)
   ;
quit;

%let SYSLAST = UDPADMS.DWER_TDW_INDIVIDUAL_DTL;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/** Step end Extract **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

/**************************************************************************** 
 * Job:             POPULATE_STAGING_ST_TDW_INDIVIDUAL_D  A5M8Y * 
 *                  TL                                                      * 
 * Description:     Version 1.0 (Baseline)Version 1.1 (Update due to        * 
 *                  changes in ST_TDW_INDIVIDUAL_DTL table structure - CR   * 
 *                   17)                                                    * 
 *                                                                          * 
 * Metadata Server: NESAS01R.IRASOR.GOV.SG                                  * 
 * Port:            8565                                                    * 
 * Location:        /ADMS_UDP/PopulateStaging                               * 
 *                                                                          * 
 * Server:          SASDI                                 A2 * 
 *                                                                          * 
 * Source Tables:   DWER_TDW_INDIVIDUAL_DTL -             AIZ * 
 *                   UDPADMS.DWER_TDW_INDIVIDUAL_DTL                        * 
 *                  DWER_TDW_INDIVIDUAL_DTL -             A5LIZ * 
 *                   UDPADMS.DWER_TDW_INDIVIDUAL_DTL                        * 
 * Target Tables:   ST_TDW_INDIVIDUAL_DTL -               A0LAQ * 
 *                   ads_stg.ST_TDW_INDIVIDUAL_DTL                          * 
 *                  ST_TDW_INDIVIDUAL_DTL -               A0Q * 
 *                   ads_stg.ST_TDW_INDIVIDUAL_DTL                          * 
 *                                                                          * 
 * Generated on:    Wednesday, 12 August, 2020 6:00:00 PM SGT               * 
 * Generated by:                                               * 
 * Version:         SAS Data Integr                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5TM814S.BN000M8Y);
%let etls_jobName = %nrquote(POPULATE_STAGING_ST_TDW_INDIVIDUAL_DTL);
%let etls_userID = %nrquote();

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%let syscc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */ 
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASDI);
%let metaPort       = %nrquote(8565);
%let metaServer     = %nrquote(NESAS01R.IRASOR.GOV.SG);

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            UDP_Character_Fields_Treatment        A5TM814S.BP0012XU * 
 * Transform:       UDP_Character_Fields_Treatment                          * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    DWER_TDW_INDIVIDUAL_DTL -             A5TM814S.BH000LIZ * 
 *                   UDPADMS.DWER_TDW_INDIVIDUAL_DTL                        * 
 * Target Table:    ST_TDW_INDIVIDUAL_DTL -               A5TM814S.BH000LAQ * 
 *                   ads_stg.ST_TDW_INDIVIDUAL_DTL                          * 
 *==========================================================================*/ 

%let transformID = %quote(A5TM814S.BP0012XU);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(UDPADMS.DWER_TDW_INDIVIDUAL_DTL); 

%let _INPUT_count = 1; 
%let _INPUT = UDPADMS.DWER_TDW_INDIVIDUAL_DTL;
%let _INPUT_connect = null;
%let _INPUT_engine = BASE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/DWER_TDW_INDIVIDUAL_DTL%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT0 = UDPADMS.DWER_TDW_INDIVIDUAL_DTL;
%let _INPUT0_connect = null;
%let _INPUT0_engine = BASE;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/DWER_TDW_INDIVIDUAL_DTL%(Table%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = ads_stg.ST_TDW_INDIVIDUAL_DTL;
%let _OUTPUT_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_stg  PORT=10000
;
%let _OUTPUT_engine = HADOOP;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateStaging/ST_TDW_INDIVIDUAL_DTL%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = id_internal cd_country cd_education_lvl cd_employment cd_national_srv 
        cd_nationality cd_race cd_gender in_edb_scheme dt_audit_begin dt_birth 
        dt_cessation dt_departure dt_death dt_effective_noc dt_end dt_handicap 
        ts_last_update cd_marital_status in_dob_complete cd_update_source 
        cd_update_reason id_updated_by cd_pref_lang cd_marital_over 
        cd_professional dt_citizen_appr dt_citizen_revoke dt_cpf_approval 
        dt_marital_status dt_pr_approval dt_pr_revocation in_taxpaying 
        in_receiver_ppty cd_trade in_employer in_auth_mes in_attend_gstclass 
        cd_nor_status dt_effective_nor dt_end_nor ts_last_update_nor 
        dt_last_extract dt_adms_created dt_adms_updated nm_src_system;

%let _OUTPUT0 = ads_stg.ST_TDW_INDIVIDUAL_DTL;
%let _OUTPUT0_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_stg  PORT=10000
;
%let _OUTPUT0_engine = HADOOP;
%let _OUTPUT0_memtype = DATA;
%let _OUTPUT0_options = %nrquote();
%let _OUTPUT0_alter = %nrquote();
%let _OUTPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateStaging/ST_TDW_INDIVIDUAL_DTL%(Table%));
%let _OUTPUT0_type = 1;
%let _OUTPUT0_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT0_keep = id_internal cd_country cd_education_lvl cd_employment cd_national_srv 
        cd_nationality cd_race cd_gender in_edb_scheme dt_audit_begin dt_birth 
        dt_cessation dt_departure dt_death dt_effective_noc dt_end dt_handicap 
        ts_last_update cd_marital_status in_dob_complete cd_update_source 
        cd_update_reason id_updated_by cd_pref_lang cd_marital_over 
        cd_professional dt_citizen_appr dt_citizen_revoke dt_cpf_approval 
        dt_marital_status dt_pr_approval dt_pr_revocation in_taxpaying 
        in_receiver_ppty cd_trade in_employer in_auth_mes in_attend_gstclass 
        cd_nor_status dt_effective_nor dt_end_nor ts_last_update_nor 
        dt_last_extract dt_adms_created dt_adms_updated nm_src_system;



/* List of target columns to keep  */ 
%let _keep = id_internal cd_country cd_education_lvl cd_employment cd_national_srv 
        cd_nationality cd_race cd_gender in_edb_scheme dt_audit_begin dt_birth 
        dt_cessation dt_departure dt_death dt_effective_noc dt_end dt_handicap 
        ts_last_update cd_marital_status in_dob_complete cd_update_source 
        cd_update_reason id_updated_by cd_pref_lang cd_marital_over 
        cd_professional dt_citizen_appr dt_citizen_revoke dt_cpf_approval 
        dt_marital_status dt_pr_approval dt_pr_revocation in_taxpaying 
        in_receiver_ppty cd_trade in_employer in_auth_mes in_attend_gstclass 
        cd_nor_status dt_effective_nor dt_end_nor ts_last_update_nor 
        dt_last_extract dt_adms_created dt_adms_updated nm_src_system;
/* List of target columns to keep  */ 
%let keep = id_internal cd_country cd_education_lvl cd_employment cd_national_srv 
        cd_nationality cd_race cd_gender in_edb_scheme dt_audit_begin dt_birth 
        dt_cessation dt_departure dt_death dt_effective_noc dt_end dt_handicap 
        ts_last_update cd_marital_status in_dob_complete cd_update_source 
        cd_update_reason id_updated_by cd_pref_lang cd_marital_over 
        cd_professional dt_citizen_appr dt_citizen_revoke dt_cpf_approval 
        dt_marital_status dt_pr_approval dt_pr_revocation in_taxpaying 
        in_receiver_ppty cd_trade in_employer in_auth_mes in_attend_gstclass 
        cd_nor_status dt_effective_nor dt_end_nor ts_last_update_nor 
        dt_last_extract dt_adms_created dt_adms_updated nm_src_system;
options minoperator;

data column_fixes;
infile datalines delimiter = ',' truncover;
input st_tbl_nm : $32. col_nm : $ 32. keep_kb : $ 1. del_ctl_chars : $ 1. dbl_to_single : $ 1.;
datalines;
isds_tbl_assessmentdetails,st_trnfr_share_in ,Y,N,N
isds_tbl_assessmentdetails,ta_estat_of_decsd  ,Y,N,N
isds_tbl_assessmentmaster,case_refer_numbr ,Y,N,N
isds_tbl_assessmentmaster,entty_name ,Y,N,N
isds_tbl_assessmentmaster,entty_phone_numbr ,Y,N,N
isds_tbl_assessmentmaster,other_remsn ,Y,N,N
isds_tbl_assessmentmaster,reson_for_penlt ,Y,N,N
isds_tbl_assessmentmaster,user_refer_numbr ,Y,N,N
isds_tbl_assessmentparty,assmt_party_id  ,Y,N,N
isds_tbl_assessmentparty,assmt_party_name ,Y,N,N
sieb_s_evt_act,COMMENTS_LONG ,Y,N,N
sieb_s_evt_act,NAME ,Y,N,N
sieb_s_evt_act,X_NAT_OF_ENQ_CD ,Y,N,N
sieb_s_evt_act,X_ACTION_CD ,Y,N,N
sieb_s_evt_act,X_SOURCE ,Y,N,N
isds_tbl_address,addrs_line1 ,Y,N,N
isds_tbl_address,addrs_line2 ,Y,N,N
isds_tbl_address,stret_name ,Y,N,N
isds_tbl_address,postl_code ,Y,N,N
isds_tbl_address,block_numbr ,Y,N,N
isds_tbl_address,unit_numbr ,Y,N,N
sieb_s_org_ext,LOC ,Y,N,N
sieb_s_org_ext,NAME ,Y,N,N
sieb_s_org_ext,X_TX_QUALFN ,Y,N,N
sieb_s_opty,X_CODE_03 ,Y,N,N
sieb_s_opty,X_RESULT_REMARK ,Y,N,N
sieb_s_opty,X_SELECT_DESC ,Y,N,N
sieb_s_opty,X_SOURCE ,Y,N,N
sieb_s_evt_mail,EMAIL_BODY ,Y,N,N
sieb_s_contact,LAST_NAME ,Y,N,N
sieb_cx_entity_id,name ,Y,N,N
sieb_cx_entity_id,x_text1_extra ,Y,N,N
icorp_offcrinpcase,ProjectName,Y,N,N
icorp_offcrinpissue,Issue,Y,N,N
dwer_tdw_ppty_trf_dtl,TX_SOLICITOR_REF ,Y,N,N
dwer_tdw_audit_case,ID_SELECTION ,Y,N,N
dwer_tdw_audit_case,TX_PRIMARY_TRADE_CODE ,Y,N,N
dwer_tdw_audit_case,TX_SECONDARY_TRADE_CODE ,Y,N,N
dwer_tdw_audit_case,ID_CASE ,Y,N,N
dwer_tdw_audit_case,TX_REASON_CLOSE ,Y,N,N
dwer_tdw_audit_case,NM_TEAM ,Y,N,N
dwer_tdw_audit_case,TX_RESULT_OUTCOME ,Y,N,N
dwer_tdw_audit_case,TX_BRANCH ,Y,N,N
dwer_tdw_audit_case,ID_OFFICER_ASSIGN ,Y,N,N
dwer_tdw_audit_case,TX_AUDIT_CASE_STATUS ,Y,N,N
dwer_tdw_audit_case,TX_AUDIT_PROGRAM ,Y,N,N
dwer_tdw_audit_case,TX_TAX ,Y,N,N
dwer_tdw_audit_case,TX_AUDIT ,Y,N,N
DWER_TDW_CASE_CP,ID_OFFICER ,N,Y,N
DWER_TDW_AI_WORK_PERMIT,ID_EMPLOYER     ,N,Y,N
DWER_TDW_AI_WORK_PERMIT,TX_WP_PROCESSED ,N,Y,N
DWER_TDW_AI_WORK_PERMIT,TX_WP_SCHEME    ,N,Y,N
DWER_TDW_AI_WORK_PERMIT,TX_WP_STATUS    ,N,Y,N
DWER_TDW_AI_WORK_PERMIT,TX_MARITAL_STATUS ,N,Y,N
DWER_TDW_AI_WORK_PERMIT,IN_COMPLETED      ,N,Y,N
DWER_TDW_AI_SAL_MPALW_NSP,NM_ASSET ,N,Y,Y
DWER_TDW_TENANCY_DTL,IN_OCCUP_STATUS     ,N,Y,N
DWER_TDW_TENANCY_DTL,IN_DT_START_OCCUP   ,N,Y,N
DWER_TDW_TENANCY_DTL,IN_DT_CEASED_OCCUP  ,N,Y,N
DWER_TDW_TENANCY_DTL,IN_VAR_RENTAL       ,N,Y,N
DWER_TDW_TENANCY_DTL,NM_ENTITY           ,N,Y,Y
DWER_TDW_TENANCY_DTL,TX_USER_AREA_LET    ,N,Y,N
DWER_TDW_RELATIONSHIP,IN_MAILIN_TO_AGENT  ,N,Y,N
DWER_TDW_RELATIONSHIP,IN_JOINT_FILER      ,N,Y,N
DWER_TDW_RELATIONSHIP,IN_DEFAULT          ,N,Y,N
DWER_TDW_PT_REFUND,ID_APPROVED_BY    ,N,Y,N
DWER_TDW_PT_REFUND,ID_CERTIFIED_BY   ,N,Y,N
DWER_TDW_PT_REFUND,ID_REVIEWED_BY    ,N,Y,N
DWER_TDW_PT_REFUND,ID_UPDATED_BY     ,N,Y,N
DWER_TDW_BUILDING_DTL,NM_LESSOR ,Y,N,N
DWER_TDW_BUILDING_DTL,ID_ESTATE ,N,Y,N
DWER_TDW_BUILDING_DTL,CD_SPECIAL_FEATURE ,N,Y,N
DWER_TDW_BUILDING_DTL,IN_ASSESS_ON_BLDG ,N,Y,N
Dwer_tdw_address_usage,TX_ADDR_ATTN_NAME ,N,Y,Y
Dwer_tdw_address_usage,ID_ADDRESS ,N,Y,N
Dwer_tdw_address_perm,TX_ADDR_LINE1 ,N,N,Y
Dwer_tdw_address_perm,TX_ADDR_LINE2,N,N,Y
Dwer_tdw_address_perm,TX_ADDR_LINE3,N,N,Y
Dwer_tdw_nr_detail,NM_ENTITY_PAYEE ,N,Y,Y
Dwer_tdw_nr_detail,NATUREPAYMENTOTHERS ,N,N,Y
Dwer_tdw_nr_detail,ID_PAYEE ,N,Y,N
irin_t_ai_pship_trust,NM_ASSET ,N,Y,Y
dwer_tdw_entity_id,ID_ENTITY ,Y,N,Y
XBRL_T_XBRL_ADMS_LABEL,TX_COMPANY_LABEL ,Y,N,N
XBRL_T_XBRL_ADMS_ELEMENT,TX_XBRL_ELEMENT_VALUE ,Y,N,N
XBRL_T_XBRL_ADMS_CONTEXT_REF,TX_CONTEXT_REF ,Y,N,N
XBRL_T_XBRL_ADMS_CONTEXT_REF,TX_CONTEXT_REF_VALUE ,Y,N,N
IRIN_T_BANKRUPTCY,ID_HISTORY_REF ,Y,N,N
IRIN_T_BUSINESS_DTL,ID_HISTORY_REF ,Y,N,N
IRIN_T_CED_GST,ID_HISTORY_REF ,Y,N,N
IRIN_T_ES_GST_DELIN,ID_HISTORY_REF ,Y,N,N
IRIN_T_CASE_ITEM,ID_HISTORY_REF ,Y,N,N
IRIN_T_CASE_ITEM,NM_ENTITY_PAYEE ,Y,N,N
IRIN_T_CASE_ITEM,ID_ENTITY_PAYEE ,Y,N,N
IRIN_T_SUPPRESSION,ID_HISTORY_REF ,Y,N,N
IRIN_T_SUPPRESSION,TX_REMARKS ,Y,N,N
DWER_TDW_XREF_INVOICE_DETAIL,TX_REMARKS ,Y,N,N
DWER_TDW_XREF_INVOICE_DETAIL,IN_DOC_TYPE ,Y,N,N
DWER_TDW_XREF_INVOICE_DETAIL,ID_INVOICE_DETAIL ,Y,N,N
DWER_TDW_XREF_INVOICE_DETAIL,ID_DOC_SOURCE ,Y,N,N
DWER_TDW_XREF_INVOICE_DETAIL,ID_MODE ,Y,N,N
DWER_TDW_XREF_INVOICE_DETAIL,ID_REF_NO ,Y,N,N
DWER_TDW_INSTALMENT_PLAN, ID_UPDATED_BY, Y,N,N
DWER_TDW_INSTALMENT_PLAN, IN_VARIABLE_PYMT, Y,N,N
DWER_TDW_SPECIAL_ATTENTION, ID_ROW, Y,N,N
DWER_TDW_SPECIAL_ATTENTION, TX_ATTENTION, Y,N,N
DWER_TDW_SPECIAL_ATTENTION, TX_ATTENTION_DESC, Y,N,N
DWER_TDW_SPECIAL_ATTENTION, TX_STATUS, Y,N,N
T_ADM_QT_ENTITY_TYPE, trade_desc_5digit, Y,N,N
;
run;

%macro Character_Fields_Treatment / mindelimiter = ' ';
/*	proc sql noprint;*/
/*		select distinct upcase(st_tbl_nm) into :tbl_fix_lst separated by ' '*/
/*			from column_fixes;*/
/*	quit;*/
/**/
	%let _SRC = %scan(&_INPUT,2,'.');
	%local rem_list keep_kb_list;

	%if 1 
	  %then %do;
			proc contents data = &_INPUT out = src_tbl_dtls(keep = name type where =(type = 2)) noprint;		
			run;	
			proc sql noprint;
				select col_nm, count(*) into :keep_kb_list separated by ' ', :keep_kb_list_cnt
					from column_fixes
					where upcase(st_tbl_nm) = "&_SRC" and keep_kb = 'Y'
				;
/*				select col_nm, count(*) into :del_ctl_chars_list separated by ' ', :del_ctl_chars_list_cnt*/
/*					from column_fixes*/
/*					where upcase(st_tbl_nm) = "&_SRC" and del_ctl_chars = 'Y'*/
/*				;*/
/*				select col_nm, count(*) into :dbl_to_single_list separated by ' ', :dbl_to_single_list_cnt*/
/*					from column_fixes*/
/*					where upcase(st_tbl_nm) = "&_SRC" and dbl_to_single = 'Y'*/
/*				;*/
				select name, count(*) into :rem_list separated by ' ', :rem_list_cnt
					from src_tbl_dtls
				;
			quit;

/*			%put keep_kb_list_cnt=&keep_kb_list_cnt del_ctl_chars_list_cnt=&del_ctl_chars_list_cnt dbl_to_single_list_cnt=&dbl_to_single_list_cnt;*/

			%if &keep_kb_list_cnt ne 0 OR &rem_list_cnt ne 0 %then %do;
			data &_INPUT;
				set &_INPUT;
					%do i = 1 %to &keep_kb_list_cnt;
						%scan(&keep_kb_list,&i,' ') = compress(%scan(&keep_kb_list,&i,' '),' `~!@#$%^&*()_-+={}[]:;",.<>/?\' || "'",'KNS');
					%end;
					%do i = 1 %to &rem_list_cnt;
						%scan(&rem_list,&i,' ') = compress(%scan(&rem_list,&i,' '),,'C');
					%end;
					%do i = 1 %to &rem_list_cnt;
						%scan(&rem_list,&i,' ') = tranwrd(%scan(&rem_list,&i,' '),'"',"'");
					%end;
			run;
			%end;
	  %end;
%mend;

%Character_Fields_Treatment

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end UDP_Character_Fields_Treatment **/

/*==========================================================================* 
 * Step:            UDP_Incremental_Load                  A5TM814S.BP0014V5 * 
 * Transform:       UDP_Incremental_Load                                    * 
 * Description:     S2 - changed                                            * 
 *                                                                          * 
 * Source Table:    DWER_TDW_INDIVIDUAL_DTL -             A5TM814S.BH000LIZ * 
 *                   UDPADMS.DWER_TDW_INDIVIDUAL_DTL                        * 
 * Target Table:    ST_TDW_INDIVIDUAL_DTL -               A5TM814S.BH000LAQ * 
 *                   ads_stg.ST_TDW_INDIVIDUAL_DTL                          * 
 *==========================================================================*/ 

%let transformID = %quote(A5TM814S.BP0014V5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(UDPADMS.DWER_TDW_INDIVIDUAL_DTL); 

%let _INPUT_count = 1; 
%let _INPUT = UDPADMS.DWER_TDW_INDIVIDUAL_DTL;
%let _INPUT_connect = null;
%let _INPUT_engine = BASE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/DWER_TDW_INDIVIDUAL_DTL%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT0 = UDPADMS.DWER_TDW_INDIVIDUAL_DTL;
%let _INPUT0_connect = null;
%let _INPUT0_engine = BASE;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/DWER_TDW_INDIVIDUAL_DTL%(Table%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = ads_stg.ST_TDW_INDIVIDUAL_DTL;
%let _OUTPUT_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_stg  PORT=10000
;
%let _OUTPUT_engine = HADOOP;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateStaging/ST_TDW_INDIVIDUAL_DTL%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = id_internal cd_country cd_education_lvl cd_employment cd_national_srv 
        cd_nationality cd_race cd_gender in_edb_scheme dt_audit_begin dt_birth 
        dt_cessation dt_departure dt_death dt_effective_noc dt_end dt_handicap 
        ts_last_update cd_marital_status in_dob_complete cd_update_source 
        cd_update_reason id_updated_by cd_pref_lang cd_marital_over 
        cd_professional dt_citizen_appr dt_citizen_revoke dt_cpf_approval 
        dt_marital_status dt_pr_approval dt_pr_revocation in_taxpaying 
        in_receiver_ppty cd_trade in_employer in_auth_mes in_attend_gstclass 
        cd_nor_status dt_effective_nor dt_end_nor ts_last_update_nor 
        dt_last_extract dt_adms_created dt_adms_updated nm_src_system;

%let _OUTPUT0 = ads_stg.ST_TDW_INDIVIDUAL_DTL;
%let _OUTPUT0_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_stg  PORT=10000
;
%let _OUTPUT0_engine = HADOOP;
%let _OUTPUT0_memtype = DATA;
%let _OUTPUT0_options = %nrquote();
%let _OUTPUT0_alter = %nrquote();
%let _OUTPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateStaging/ST_TDW_INDIVIDUAL_DTL%(Table%));
%let _OUTPUT0_type = 1;
%let _OUTPUT0_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT0_keep = id_internal cd_country cd_education_lvl cd_employment cd_national_srv 
        cd_nationality cd_race cd_gender in_edb_scheme dt_audit_begin dt_birth 
        dt_cessation dt_departure dt_death dt_effective_noc dt_end dt_handicap 
        ts_last_update cd_marital_status in_dob_complete cd_update_source 
        cd_update_reason id_updated_by cd_pref_lang cd_marital_over 
        cd_professional dt_citizen_appr dt_citizen_revoke dt_cpf_approval 
        dt_marital_status dt_pr_approval dt_pr_revocation in_taxpaying 
        in_receiver_ppty cd_trade in_employer in_auth_mes in_attend_gstclass 
        cd_nor_status dt_effective_nor dt_end_nor ts_last_update_nor 
        dt_last_extract dt_adms_created dt_adms_updated nm_src_system;



/* List of target columns to keep  */ 
%let _keep = id_internal cd_country cd_education_lvl cd_employment cd_national_srv 
        cd_nationality cd_race cd_gender in_edb_scheme dt_audit_begin dt_birth 
        dt_cessation dt_departure dt_death dt_effective_noc dt_end dt_handicap 
        ts_last_update cd_marital_status in_dob_complete cd_update_source 
        cd_update_reason id_updated_by cd_pref_lang cd_marital_over 
        cd_professional dt_citizen_appr dt_citizen_revoke dt_cpf_approval 
        dt_marital_status dt_pr_approval dt_pr_revocation in_taxpaying 
        in_receiver_ppty cd_trade in_employer in_auth_mes in_attend_gstclass 
        cd_nor_status dt_effective_nor dt_end_nor ts_last_update_nor 
        dt_last_extract dt_adms_created dt_adms_updated nm_src_system;
/* List of target columns to keep  */ 
%let keep = id_internal cd_country cd_education_lvl cd_employment cd_national_srv 
        cd_nationality cd_race cd_gender in_edb_scheme dt_audit_begin dt_birth 
        dt_cessation dt_departure dt_death dt_effective_noc dt_end dt_handicap 
        ts_last_update cd_marital_status in_dob_complete cd_update_source 
        cd_update_reason id_updated_by cd_pref_lang cd_marital_over 
        cd_professional dt_citizen_appr dt_citizen_revoke dt_cpf_approval 
        dt_marital_status dt_pr_approval dt_pr_revocation in_taxpaying 
        in_receiver_ppty cd_trade in_employer in_auth_mes in_attend_gstclass 
        cd_nor_status dt_effective_nor dt_end_nor ts_last_update_nor 
        dt_last_extract dt_adms_created dt_adms_updated nm_src_system;
options minoperator;
options mprint mlogic symbolgen;

%macro MCR_INC_LOAD / mindelimiter = ' ';
	%let CURR_DATETIME = %sysfunc(datetime(),datetime20.);
	%let __OUT = %scan(&_OUTPUT,2,.);
    %let __ORIGIN_OUT = ST_TDW_INDIVIDUAL_DTL;
	/* %let __TMP = %sysfunc(catx(_,TMP,&__OUT)); */
    %let __TMP = TMP_ST_TDW_INDIVIDUAL_DTL;
	%let SRC_SYSTEM = %substr(%scan(&_INPUT,2,'_.'),1,4);
	%local MCR_PK_LIST1 MCR_PK_LIST2 MCR_INC_DATES_LIST1 MCR_INC_DATES_LIST2 SPCL_LD CHNG_OBS ALL_NMS_TMP;
	%let ADMSDATA_TBL = %scan(&_INPUT,2,'.');

    /* Getting the primary keys by querying from the CTL table for the original STG table name */
	proc sql noprint;
		select distinct 
			case 
				when REMARKS ne '' then REMARKS 
				else 'NORMAL' 
			end 
		into :SPCL_LD
			from ADS_STG.T_ADM_CTL_STAGING_DELTA
				where STAGING_TABLE = "&__ORIGIN_OUT"
		;
		select PK_VAR, '"' || strip(PK_VAR) || '"' into :MCR_PK_LIST1 separated by ' ', :MCR_PK_LIST2 separated by ',' 
			from ADS_STG.T_ADM_CTL_STAGING_PK
				where STAGING_TABLE = "&__ORIGIN_OUT"
		;
	quit;

/*	PK null and duplicate checks */
	%if &__ORIGIN_OUT in &PK_TBL_LIST
		%then %do;

		%if &MCR_PK_LIST1 eq %then %do;
			proc sql noprint;
				select name into :MCR_PK_LIST1 separated by ' '
					from dictionary.columns
					where libname = 'UDPADMS' and memname = "&ADMSDATA_TBL"
				;
			quit;
		%end;
/*
		proc sql nowarn;
			alter table ADMSDATA.&ADMSDATA_TBL
			drop primary key;
		quit;
*/
		proc datasets lib = UDPADMS nodetails nolist;
			modify &ADMSDATA_TBL;
			ic create PRIM_KEY = primary key(&MCR_PK_LIST1);
		run; quit;

	%end;

	/* For Refresh Staging Tables	*/
	%if &__ORIGIN_OUT in &REF_TBL_LST %then
		%do;

			proc sql noprint;
				connect to Hadoop
					( 
					&UDP_Connect
					);
				select cnt into :CNT_B4 from connection to Hadoop
					(
				select count(*) as cnt from &UDP_DB_AND_SCHEMA.&__OUT
					);
				execute 
					( 
					truncate table &UDP_DB_AND_SCHEMA.&__OUT 
					) by Hadoop;
				disconnect from Hadoop;
			quit;

			%put NUMBER OF RECORDS TRUNCATED FROM &__OUT : &CNT_B4;

			data work.ADMS_NEW_ROWS;
				length nm_src_system $50 dt_adms_updated dt_adms_created 8;
				format dt_adms_updated dt_adms_created datetime.;
				set &_INPUT;
				nm_src_system = "&SRC_SYSTEM";
				dt_adms_updated = "&CURR_DATETIME"dt;
				dt_adms_created = "&CURR_DATETIME"dt;
			run;

			%goto insert_rows;
		%end;

	%let INS_TBL_SRC = ADMS_NEW_ROWS;
	%let INS_TBL_LIB = WORK;

	proc sql noprint;
		select DELTA_VAR, DELTA_VAR into :MCR_INC_DATES_LIST1 separated by ' ', :MCR_INC_DATES_LIST2 separated by ','
			from ADS_STG.T_ADM_CTL_STAGING_DELTA
				where STAGING_TABLE = "&__ORIGIN_OUT"
		;
		connect to Hadoop
			( 
			&UDP_Connect
			);
		select cnt into :CNT_B4 from connection to Hadoop
			(
		select count(*) as cnt from &UDP_DB_AND_SCHEMA.&__TMP
			);
		execute 
			( 
			truncate table &UDP_DB_AND_SCHEMA.&__TMP 
			) by Hadoop;
		disconnect from Hadoop;
	quit;

	%put NUMBER OF RECORDS TRUNCATED FROM &__TMP : &CNT_B4;

	data work.etls_compare_digest(keep = &MCR_PK_LIST1);
		set &_OUTPUT(keep = &MCR_PK_LIST1);
	run;

	/* source/compare lookup: hash lookup method  */
	data work.ADMS_CHANGED_ROWS
		work.ADMS_NEW_ROWS
		work.W7UBXY2H;
		length source_digest $ 32 nm_src_system $ 50 dt_adms_updated dt_adms_created 8;
		format dt_adms_updated dt_adms_created datetime.;
		drop rc;

		if 0 then
			set work.etls_compare_digest;

		if _N_ eq 1 then
			do;
				declare hash hct(dataset: 'work.etls_compare_digest', hashexp: 10);
				hct.defineKey(&MCR_PK_LIST2);
				hct.defineData(&MCR_PK_LIST2);
				hct.defineDone();
			end;

		set &_INPUT end = eof;
		nm_src_system = "&SRC_SYSTEM";
		dt_adms_updated = "&CURR_DATETIME"dt;
		dt_adms_created = "&CURR_DATETIME"dt;

		/* source/compare match  */
		if hct.find() eq 0 then
			do;
				output work.ADMS_CHANGED_ROWS;

				/* remove found key + data  */
				hct.remove();
			end;

		/* source table: new records  */
		else if hct.find() ne 0 then
			output work.ADMS_NEW_ROWS;

		if eof then
			rc = hct.output(dataset: 'work.etls_missing_records');
	run;

	/*	proc sql;*/
	/*		create table INC_LD.&__OUT._NW as select * from work.ADMS_NEW_ROWS;*/
	/*		create table INC_LD.&__OUT._UP as select * from work.ADMS_CHANGED_ROWS;*/
	/*	quit;*/
	proc sql noprint;
		select nlobs into :CHNG_OBS from dictionary.tables 
			where libname = 'WORK' and memname = 'ADMS_CHANGED_ROWS';
	quit;

	%if &CHNG_OBS ne 0 and %sysfunc(exist(work.ADMS_CHANGED_ROWS)) eq 1 %then
		%do;
			%put Change records detected for &_OUTPUT;

			/*Bulkload insert update rows which contains the PK of the target table*/
			proc contents data =  &UDP_DB_AND_SCHEMA.&__TMP out = output_tmp_tbl_dtls noprint;
			run;

			proc sort data = output_tmp_tbl_dtls;
				by varnum;
			run;

			proc sql noprint;
				select name into :ALL_NMS_TMP separated by ','
					from output_tmp_tbl_dtls
						order by varnum;
			quit;

			proc sql;
				insert into &UDP_DB_AND_SCHEMA.&__TMP 
					select &ALL_NMS_TMP from work.ADMS_CHANGED_ROWS
				;
			quit;

			/*CHANGE: Delete updated records in the __TMP that are already in the actual __ORIGIN_OUT HADOOP*/
			proc sql;
				connect to Hadoop
					( 
					&UDP_Connect
					);
				execute 
					( 
				delete from &__TMP
					where exists
						(
					select * from &__ORIGIN_OUT where
						%let iCnt = 1;
						%let PKCOL_TMP = %scan(&MCR_PK_LIST1,&iCnt,' ');

						%do
							%while(&PKCOL_TMP ne);
							%if (%upcase(&__ORIGIN_OUT)=ST_TDW_EXEMPTION_PV AND %upcase(&PKCOL_TMP)=ID_EXEMPT_CERT ) OR
							(%upcase(&__ORIGIN_OUT)=ST_TDW_AI_SOG AND %upcase(&PKCOL_TMP)=IN_DEEMED ) OR
							(%upcase(&__ORIGIN_OUT)=ST_T_ASSESSMENT AND %upcase(&PKCOL_TMP)=DT_TAX_PD_BEGIN ) 
							%then

					%do;
						(&__ORIGIN_OUT..&PKCOL_TMP = &__TMP..&PKCOL_TMP OR (&__ORIGIN_OUT..&PKCOL_TMP is null and &__TMP..&PKCOL_TMP is null))
					%end;
	%else
		%do;
			&__ORIGIN_OUT..&PKCOL_TMP = &__TMP..&PKCOL_TMP
		%end;

	%let iCnt = %eval(&iCnt + 1);
	%let PKCOL_TMP = %scan(&MCR_PK_LIST1,&iCnt,' ');

	%if &PKCOL_TMP ne %then
		AND;
		%end;
	) ) by HADOOP;
	disconnect from HADOOP;
			quit;

			proc append base = work.ADMS_NEW_ROWS data = work.ADMS_CHANGED_ROWS;
			run;

%end;

	%insert_rows:

			proc sql noprint;
				select nlobs into :NEW_OBS from dictionary.tables 
					where libname = "WORK" and memname = "ADMS_NEW_ROWS";
			quit;

			%if &NEW_OBS ne 0 and %sysfunc(exist(work.ADMS_NEW_ROWS)) eq 1 %then
				%do;

					proc contents data = &_OUTPUT out = output_tbl_dtls noprint;
					run;

					proc sort data = output_tbl_dtls;
						by varnum;
					run;

					proc sql noprint;
						select name into :ALL_NMS separated by ','
							from output_tbl_dtls
						;
					quit;

					%IF &__ORIGIN_OUT=ST_T_ENQUIRY_MESSAGE %THEN
						%DO;

							proc sql;
								insert into &_OUTPUT  select &ALL_NMS from work.ADMS_NEW_ROWS
								;
							quit;

							proc sql noprint;
								connect to Hadoop
									( 
									&UDP_Connect
									);
								select cnt into :CNT_AFTER from connection to Hadoop
									(
								select count(*) as cnt from &UDP_DB_AND_SCHEMA.&__OUT
									);
							Quit;

							%put NUMBER OF RECORDS LOADED TO &__OUT : &CNT_AFTER;

							proc sql noprint;
								connect to Hadoop
									( 
									&UDP_Connect
									);
								execute 
									(
								UPDATE &_OUTPUT
									SET TX_MESSAGE_CONTENT = REGEXP_REPLACE(TX_MESSAGE_CONTENT, '<B>', '\n')
								) by Hadoop;
							quit;

						%END;
					%ELSE
						%DO;

							proc sql;
								insert into &_OUTPUT select &ALL_NMS from work.ADMS_NEW_ROWS
								;
							quit;

							proc sql noprint;
								select count(*) format = 20. into :TGT_CNT from &_OUTPUT
									where dt_adms_created = "&CURR_DATETIME"dt
								;
								select count(*) format = 20. into :SRC_CNT from work.ADMS_NEW_ROWS;
							quit;

							%if &TGT_CNT ne &SRC_CNT %then
								%do;
									%put ERROR: Loaded rows in the tmp target table does not match with the expected number of rows to be loaded;

									%abort;
								%end;
                            
						%END;
				%END;
%mend MCR_INC_LOAD;

%MCR_INC_LOAD

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end UDP_Incremental_Load **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

