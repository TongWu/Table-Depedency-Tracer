/**************************************************************************** 
 * Job:             POPULATE_ALL_TARGET_T_ADM_PR_RFD_IIT  A5TM814S.BN000MIN * 
 * Description:     Version 1.0                                             * 
 *                                                                          * 
 * Metadata Server: NESAS01R.IRASOR.GOV.SG                                  * 
 * Port:            8565                                                    * 
 * Location:        /ADMS_UDP/PopulateBaseOrTarget                          * 
 *                                                                          * 
 * Server:          SASDI                                 A5TM814S.AT000002 * 
 *                                                                          * 
 * Source Tables:   T_ADM_PR_RFD_IIT -                    A5TM814S.BH000MK4 * 
 *                   UDPADMS.T_ADM_PR_RFD_IIT                               * 
 *                  T_ADM_CTL_LOOP_ITER -                 A5TM814S.BH000LF6 * 
 *                   ads_stg.T_ADM_CTL_LOOP_ITER                            * 
 *                  T_ADM_PR_RFD_IIT -                    A5TM814S.BH000MK4 * 
 *                   UDPADMS.T_ADM_PR_RFD_IIT                               * 
 *                  T_ADM_PR_RFD_IIT -                    A5TM814S.BH000MK4 * 
 *                   UDPADMS.T_ADM_PR_RFD_IIT                               * 
 * Target Tables:   T_ADM_CTL_LOOP_ITER -                 A5TM814S.BH000LF6 * 
 *                   ads_stg.T_ADM_CTL_LOOP_ITER                            * 
 *                  T_ADM_PR_RFD_IIT -                    A5TM814S.BH000L5R * 
 *                   ads_tgt.T_ADM_PR_RFD_IIT                               * 
 *                  T_ADM_PR_RFD_IIT -                    A5TM814S.BH000L5R * 
 *                   ads_tgt.T_ADM_PR_RFD_IIT                               * 
 *                                                                          * 
 * Generated on:    Tuesday, 5 January, 2021 10:26:30 AM SGT                * 
 * Generated by:                                               * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5TM814S.BN000MIN);
%let etls_jobName = %nrquote(POPULATE_ALL_TARGET_T_ADM_PR_RFD_IIT);
%let etls_userID = %nrquote(INL9BYP@IRAS);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%let syscc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */ 
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASDI);
%let metaPort       = %nrquote(8565);
%let metaServer     = %nrquote(NESAS01R.IRASOR.GOV.SG);

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Delete_Table                          A5TM814S.BP0013OY * 
 * Transform:       Delete_Table                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    T_ADM_PR_RFD_IIT -                    A5TM814S.BH000MK4 * 
 *                   UDPADMS.T_ADM_PR_RFD_IIT                               * 
 * Target Table:    T_ADM_CTL_LOOP_ITER -                 A5TM814S.BH000LF6 * 
 *                   ads_stg.T_ADM_CTL_LOOP_ITER                            * 
 *==========================================================================*/ 

%let transformID = %quote(A5TM814S.BP0013OY);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, DATA)) or 
         %sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = UDPADMS.T_ADM_PR_RFD_IIT out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(UDPADMS.T_ADM_PR_RFD_IIT); 

%let _INPUT_count = 1; 
%let _INPUT = UDPADMS.T_ADM_PR_RFD_IIT;
%let _INPUT_connect = null;
%let _INPUT_engine = BASE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/Extract/T_ADM_PR_RFD_IIT%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT0 = UDPADMS.T_ADM_PR_RFD_IIT;
%let _INPUT0_connect = null;
%let _INPUT0_engine = BASE;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/Extract/T_ADM_PR_RFD_IIT%(Table%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = ads_stg.T_ADM_CTL_LOOP_ITER;
%let _OUTPUT_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_stg  PORT=10000
;
%let _OUTPUT_engine = HADOOP;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateStaging/T_ADM_CTL_LOOP_ITER%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = nm_target_table qt_iter;

%let _OUTPUT0 = ads_stg.T_ADM_CTL_LOOP_ITER;
%let _OUTPUT0_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_stg  PORT=10000
;
%let _OUTPUT0_engine = HADOOP;
%let _OUTPUT0_memtype = DATA;
%let _OUTPUT0_options = %nrquote();
%let _OUTPUT0_alter = %nrquote();
%let _OUTPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateStaging/T_ADM_CTL_LOOP_ITER%(Table%));
%let _OUTPUT0_type = 1;
%let _OUTPUT0_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT0_keep = nm_target_table qt_iter;



/* List of target columns to keep  */ 
%let _keep = nm_target_table qt_iter;
/* List of target columns to keep  */ 
%let keep = nm_target_table qt_iter;
%let __CURR_TBL = %scan(&_INPUT,2,'.');
%put &__CURR_TBL;
%macro del_input_table;
	
%if %sysfunc(exist(&_INPUT)) = 1 %then %do;
	proc datasets lib = %scan(&_INPUT,1,'.') nolist;
		delete &__CURR_TBL;
	run; quit;
%end;

%mend;
%del_input_table

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Delete_Table **/

/*==========================================================================* 
 * Step:            Loop                                  A5TM814S.BP0013OZ * 
 * Transform:       Loop                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    T_ADM_CTL_LOOP_ITER -                 A5TM814S.BH000LF6 * 
 *                   ads_stg.T_ADM_CTL_LOOP_ITER                            * 
 * Target Table:    Loop - work.LOOP_STATUS               A5TM814S.BE000RH8 * 
 *==========================================================================*/ 

%let transformID = %quote(A5TM814S.BP0013OZ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(ads_stg.T_ADM_CTL_LOOP_ITER, DATA)) or 
         %sysfunc(exist(ads_stg.T_ADM_CTL_LOOP_ITER, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from ads_stg.T_ADM_CTL_LOOP_ITER;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(ads_stg.T_ADM_CTL_LOOP_ITER); 

/* Capture summary statistics about this step for performance reporting  */ 
%put "DIS_SUMM";
%macro etls_getHandle(statusTable=, handleVariable=, row=); 
   %let etls_dsid = %sysfunc(open(&statusTable)); 
   %if (&etls_dsid = 0) %then 
      %put %sysfunc(sysmsg()); 
   %else 
   %do; 
      %let rc = %sysfunc(fetchobs(&etls_dsid, &row)); 
      %if (&rc ne 0) %then 
         %put %sysfunc(sysmsg()); 
      %else 
      %do; 
         %let etls_varnum = %sysfunc(varnum(&etls_dsid,&handleVariable)); 
         %if (&etls_varnum > 0) %then 
            %sysfunc(getvarc(&etls_dsid,&etls_varnum)); 
         %else 
            %put %sysfunc(sysmsg()); 
      %end; 
      %let rc = %sysfunc(close(&etls_dsid)); 
   %end; 
%mend etls_getHandle; 

%macro etls_freeHandle(statusTable=, statusVariable=, handleVariable=, 
   handleName=, statusSetting="Finished", 
   endTimeVariable=endTime, startTimeVariable=startTime, signoff=1, 
   returnCodeVariable=, returnCodeMacroVariable=, setMainJobRC=1, 
   statusUnknownReturnCode=., startTimeMacroVariable=, endTimeMacroVariable= ); 

   %if (&statusTable ne ) %then 
   %do; 
      %local etls_rcMacroVarExisted; 
      %let etls_rcMacroVarExisted = 0; 
      %if ("&returnCodeMacroVariable" ne "") %then 
      %do; 
         proc sql noprint; 
            select '1' into: etls_rcMacroVarExisted from dictionary.macros 
            where name=kupcase("&returnCodeMacroVariable"); 
         quit; 

         %rcSet(&sqlrc); 
         %if (&etls_rcMacroVarExisted = 0) %then 
         %do; 
            %put WARNING%QUOTE(:) Return code from inner job not found.  Setting status to Unknown.;
            %let &returnCodeMacroVariable=&statusUnknownReturnCode; 
         %end; 
         %if (&setMainJobRC eq 1) %then 
            %rcSet(&&&returnCodeMacroVariable); 
      %end; 
      %else 
      %do; 
         %let returnCodeMacroVariable=etls_rcmacvar; 
         %let &returnCodeMacroVariable=&statusUnknownReturnCode; 
      %end; 

      %local etls_startTimeMacroVarExisted; 
      %let etls_startTimeMacroVarExisted = 0; 
      %if ("&startTimeMacroVariable" ne "") %then 
      %do; 
         proc sql noprint; 
            select '1' into: etls_startTimeMacroVarExisted from dictionary.macros 
            where name=kupcase("&startTimeMacroVariable"); 
         quit; 

         %rcSet(&sqlrc); 
         %if (&etls_startTimeMacroVarExisted = 0) %then 
         %do; 
            %put WARNING%QUOTE(:) Start time from inner job not found.  No value will be set.;
            %let &startTimeMacroVariable=; 
         %end; 
      %end; 

      %local etls_endTimeMacroVarExisted; 
      %let etls_endTimeMacroVarExisted = 0; 
      %if ("&endTimeMacroVariable" ne "") %then 
      %do; 
         proc sql noprint; 
            select '1' into: etls_endTimeMacroVarExisted from dictionary.macros 
            where name=kupcase("&endTimeMacroVariable"); 
         quit; 

         %rcSet(&sqlrc); 
         %if (&etls_endTimeMacroVarExisted = 0) %then 
         %do; 
            %put WARNING%QUOTE(:) End time from inner job not found.  Setting end time to current
      time.;
            %let &endTimeMacroVariable=%sysfunc(datetime()); 
         %end; 
      %end; 

      data &statusTable; 
         modify &statusTable(where=(&handleVariable = &handleName)); 
         %if ("&startTimeMacroVariable" ne "") %then 
         %do; 
            &startTimeVariable = input(symget("&startTimeMacroVariable"),32.);; 
         %end; 
         %if ("&endTimeVariable" ne "") %then 
         %do; 
            %if ("&endTimeMacroVariable" ne "") %then 
            %do; 
               &endTimeVariable = input(symget("&endTimeMacroVariable"),32.);; 
            %end; 
            %else 
               &endTimeVariable = datetime();; 
         %end; 
         %if ("&returnCodeVariable" ne "") %then 
            &returnCodeVariable = input(symget("&returnCodeMacroVariable"),32.);; 
         %if ("&statusVariable" ne "") %then 
         %do; 
            if (symget("etls_rcMacroVarExisted") eq "0") then 
               &statusVariable = "Unknown Status"; 
            else
               &statusVariable = &statusSetting;
         %end;
         call symput('handle',&handleVariable); 
         replace; 
         stop; 
      run; 

      %rcSet(&syserr); 

      %if (&signoff eq 1) %then 
         %etls_signoff(handleName=&handle); 
   %end; 
%mend etls_freeHandle; 

%macro etls_createHandle(statusTable=,
                         statusVariable=,
                         handleVariable=,
                         handlePrefix=rmt,
                         gridOptionSet=,
                         workloadMacroVariable=,
                         row=,
                         machineVariable=,
                         statusSetting="Running", 
                         startTimeVariable=startTime,
                         signon=1,
                         useGrid=1,
                         log=,
                         output=,
                         gridRC=,
                         cmacvar=etls_signonStatus,
                         additionalSignonOptions=,
                         signonRetries= ); 

   %local remoteSessionId; 
   %let remoteSessionId = &handlePrefix.&row; 
   %let &cmacvar = 1; 
   %local etls_machineId; 
   %if (&signon eq 1) %then 

      %etls_signon(handleName=&remoteSessionId,
                   useGrid=&useGrid,
                   machineIdMacroVariable=etls_machineId,
                   gridOptionSet=&etls_gridOptionSet,
                   workloadMacroVariable=&workloadMacroVariable,
                   log=&log,
                   output=&output,
                   cmacvar=&cmacvar,
                   gridRC=&gridRC,
                   additionalSignonOptions=&additionalSignonOptions,
					signonRetries=&signonRetries,
                   gridJobName=DIS_&etls_jobName._&row); 

   %else %let &cmacvar=0; 

   data &statusTable; 
      retain ptr &row; 
      modify &statusTable point = ptr; 
      &handleVariable = "&remoteSessionId"; 
      %if (&signon eq 1) %then 
         &machineVariable = "&etls_machineId";; 
      %if (&&&cmacvar ne 0) %then 
      %do; 
         &statusVariable = "Failed Signon"; 
      %end; 
      %else 
         &statusVariable = &statusSetting;; 
      %if (&startTimeVariable ne ) %then 
         &startTimeVariable = datetime();; 
      replace; 
      stop; 
   run; 

   %rcSet(&syserr); 
%mend etls_createHandle; 

%macro etls_getParameterNames(parameterTable=, parameterVariableMacro=, startingColumnNumber=1);
   %let &parameterVariableMacro = ;
   %let dsid = %sysfunc(open(&parameterTable));
   %if (&dsid gt 0) %then 
   %do; 
      %do i=&startingColumnNumber %to %sysfunc(attrn(&dsid,nvars)); 
         %let &parameterVariableMacro = &&&parameterVariableMacro %sysfunc(varname(&dsid,&i)); 
      %end; 
      %let dsid = %sysfunc(close(&dsid)); 
   %end; 
   %else 
      %put %sysfunc(sysmsg()); 
   %rcSet(&syserr); 
%mend etls_getParameterNames; 

%macro etls_getParameters(parameterTable=, row=, startingColumnNumber=1 , handleName=); 
   data _null_; 
      length vname $256 vtype $1 value $32767; 
      dsid = open("&parameterTable"); 
      if (dsid > 0) then 
      do; 
         do _i = 1 to &row; 
            fetchrc = fetch(dsid); 
         end; 
         do _i=&startingColumnNumber to attrn(dsid,'nvars'); 
            vname = varname(dsid,_i); 
            vtype = vartype(dsid,_i); 
            if (fetchrc = 0) then 
            do; 
               if (vtype = 'C') then 
               do; 
                  value = getvarc(dsid,_i); 
                  value = tranwrd(value,"%","%%"); 
                  value = tranwrd(value,"(","%("); 
                  value = tranwrd(value,")","%)"); 
                  value = tranwrd(value,'"','%"'); 
                  value = tranwrd(value,"'","%'"); 
               end; 
               else 
                  value = left(put(getvarn(dsid,_i),best32.)); 
            end; /* fetchrc = 0 */ 
            
            put ;
            if kindexc(trimn(value),"+-*/<>=^~;, '()&%",'"')>0 then 
            do; 
               value='%nrstr('||ktrim(value)||')'; 
               put "ETLS_DIAG%QUOTE(:) Special characters encountered; References may require: %nrbquote(%)UNQUOTE(&" vname+(-1)').';
               put "NOTE: Special characters encountered; References may require: %nrbquote(%)UNQUOTE(&" vname+(-1)').';
            end; 
            %if %str(&handlename) ne %str() %then 
            %do; 
               value = '%syslput '||ktrim(vname)||'= '||ktrim(value)||" / remote = &handleName;"; 
            %end; 
            %else 
            %do; 
               value = '%let '||ktrim(vname)||'= '||ktrim(value)||';'; 
            %end; 
            
            put "NOTE: Setting macro variable " vname "with statement:" value ;
            call execute(value); 
         end; /* do i= */ 
         dsid = close(dsid); 
      end; /* dsid > 0 */ 
      else 
      do; 
         put "ERROR%QUOTE(:) Parameter table, &parameterTable., could not be"
              " opened.";
         abort; 
      end; 
      stop; 
   run; 
   
   %rcSet(&syserr); 
%mend etls_getParameters; 

%macro etls_loopWESX3HJ; 
   %local etls_filePrefix; 
   %let etls_filePrefix = ; 
   
   %macro etls_processToLoopWESX3HT(parameterTable=, row=, handleName=rmt);
      %local etls_parmvars; 
      %etls_getParameterNames(parameterTable=&parameterTable, 
         parameterVariableMacro=etls_parmvars, 
         startingColumnNumber=1); 
      %local &etls_parmvars; 
      %etls_getParameters(parameterTable=&parameterTable, row=&row, 
         startingColumnNumber=1); 
      %let etls_previousFilePrefix = &etls_filePrefix;
      %local etls_filePrefix; 
      %let etls_filePrefix = &etls_previousFilePrefix.&handleName; 
      %macro etls_jobWESX3HK; 
      
         /**************************************************************************** 
          * Job:             POPULATE_TARGET_T_ADM_PR_RFD_IIT      A5TM814S.BN000MPE * 
          * Description:     Version 1.0                                             * 
          *                                                                          * 
          * Metadata Server: NESAS01R.IRASOR.GOV.SG                                  * 
          * Port:            8565                                                    * 
          * Location:        /ADMS_UDP/PopulateBaseOrTarget                          * 
          *                                                                          * 
          * Server:          SASDI                                 A5TM814S.AT000002 * 
          *                                                                          * 
          * Source Tables:   BASE_ADM_PR_RFD_IIT -                 A5TM814S.BH000MK3 * 
          *                   UDPADMS.BASE_ADM_PR_RFD_IIT                            * 
          *                  BASE_ADM_PR_RFD_IIT -                 A5TM814S.BH000MK3 * 
          *                   UDPADMS.BASE_ADM_PR_RFD_IIT                            * 
          * Target Table:    T_ADM_PR_RFD_IIT -                    A5TM814S.BH000MK4 * 
          *                   UDPADMS.T_ADM_PR_RFD_IIT                               * 
          *                                                                          * 
          * Generated on:    Tuesday, 5 January, 2021 10:26:30 AM SGT                * 
          * Generated by:                                               * 
          * Version:         SAS Data Integration Studio 4.904                       * 
          ****************************************************************************/ 
         
         /* Generate the process id for job  */ 
         %put Process ID: &SYSJOBID;
         
         /* General macro variables  */ 
         %let jobID = %quote(A5TM814S.BN000MPE);
         %let etls_jobName = %nrquote(POPULATE_TARGET_T_ADM_PR_RFD_IIT);
         %let etls_userID = %nrquote(INL9BYP@IRAS);
         
         
         /* Create metadata macro variables */
         %let IOMServer      = %nrquote(SASDI);
         %let metaPort       = %nrquote(8565);
         %let metaServer     = %nrquote(NESAS01R.IRASOR.GOV.SG);
         
         /* Setup for capturing job status  */ 
         %let etls_startTime = %sysfunc(datetime(),datetime.);
         %let etls_recordsBefore = 0;
         %let etls_recordsAfter = 0;
         %let etls_lib = 0;
         %let etls_table = 0;
         
         %global etls_debug; 
         %macro etls_setDebug; 
            %if %str(&etls_debug) ne 0 %then 
               OPTIONS MPRINT%str(;); 
         %mend; 
         %etls_setDebug; 
         
         /*==========================================================================* 
          * Step:            Extract 4 YA                          A5TM814S.BP00157W * 
          * Transform:       Extract                                                 * 
          * Description:                                                             * 
          *                                                                          * 
          * Source Table:    BASE_ADM_PR_RFD_IIT -                 A5TM814S.BH000MK3 * 
          *                   UDPADMS.BASE_ADM_PR_RFD_IIT                            * 
          * Target Table:    Extract - work.W1CLZ92T               A5TM814S.BE000S3Q * 
          *==========================================================================*/ 
         
         %let transformID = %quote(A5TM814S.BP00157W);
         %let trans_rc = 0;
         %let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 
         
         %let etls_recCheckExist = 0; 
         %let etls_recnt = 0; 
         %macro etls_recordCheck; 
            %let etls_recCheckExist = %eval(%sysfunc(exist(UDPADMS.BASE_ADM_PR_RFD_IIT, DATA)) or 
                  %sysfunc(exist(UDPADMS.BASE_ADM_PR_RFD_IIT, VIEW))); 
            
            %if (&etls_recCheckExist) %then
            %do;
               %local etls_syntaxcheck; 
               %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
               /* Turn off syntaxcheck option to perform following steps  */ 
               options nosyntaxcheck;
               
               proc contents data = UDPADMS.BASE_ADM_PR_RFD_IIT out = work.etls_contents(keep = nobs) noprint; 
               run; 
               
               data _null_; 
                  set work.etls_contents (obs = 1); 
                  call symput("etls_recnt", left(put(nobs,32.))); 
               run;
               
               proc datasets lib = work nolist nowarn memtype = (data view);
                  delete etls_contents;
               quit;
               
               /* Reset syntaxcheck option to previous setting  */ 
               options &etls_syntaxcheck; 
            %end;
         %mend etls_recordCheck;
         %etls_recordCheck;
         
         %let SYSLAST = %nrquote(UDPADMS.BASE_ADM_PR_RFD_IIT); 
         
         %global etls_sql_pushDown;
         %let etls_sql_pushDown = -1;
         option DBIDIRECTEXEC;
         
         /*---- Map the columns  ----*/ 
         proc datasets lib = work nolist nowarn memtype = (data view);
            delete W1CLZ92T;
         quit;
         
         %put %str(NOTE: Mapping columns ...);
         proc sql;
            create table work.W1CLZ92T as
               select
                  id_internal,
                  am_refund as IIT_REFUND   
                     label = 'am_ref_calculate',
                  (1+ &curr_ya - YA) as PERIOD length = 8
            from &SYSLAST
               where calculated period BETWEEN &ADMS_PERIOD AND (&ADMS_PERIOD + 3)
            ;
         quit;
         
         %let SYSLAST = work.W1CLZ92T;
         
         %global etls_sql_pushDown;
         %let etls_sql_pushDown = &sys_sql_ip_all;
         
         %rcSet(&sqlrc); 
         
         
         
         /** Step end Extract 4 YA **/
         
         /*==========================================================================* 
          * Step:            Set_of_11_test2                       A5TM814S.BP00157X * 
          * Transform:       Set_of_11                                               * 
          * Description:                                                             * 
          *                                                                          * 
          * Source Table:    Extract - work.W1CLZ92T               A5TM814S.BE000S3Q * 
          * Target Table:    Set_of_11_test2_OUTPUT0 -             A5TM814S.BE000S3R * 
          *                   work.T_ADM_PR_RFD_IIT_SETOF11                          * 
          *==========================================================================*/ 
         
         %let transformID = %quote(A5TM814S.BP00157X);
         %let trans_rc = 0;
         %let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 
         
         %let etls_recCheckExist = 0; 
         %let etls_recnt = 0; 
         %macro etls_recordCheck; 
            %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1CLZ92T, DATA)) or 
                  %sysfunc(exist(work.W1CLZ92T, VIEW))); 
            
            %if (&etls_recCheckExist) %then
            %do;
               %local etls_syntaxcheck; 
               %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
               /* Turn off syntaxcheck option to perform following steps  */ 
               options nosyntaxcheck;
               
               proc contents data = work.W1CLZ92T out = work.etls_contents(keep = nobs) noprint; 
               run; 
               
               data _null_; 
                  set work.etls_contents (obs = 1); 
                  call symput("etls_recnt", left(put(nobs,32.))); 
               run;
               
               proc datasets lib = work nolist nowarn memtype = (data view);
                  delete etls_contents;
               quit;
               
               /* Reset syntaxcheck option to previous setting  */ 
               options &etls_syntaxcheck; 
            %end;
         %mend etls_recordCheck;
         %etls_recordCheck;
         
         %let SYSLAST = %nrquote(work.W1CLZ92T); 
         
         %let _INPUT_count = 1; 
         %let _INPUT = work.W1CLZ92T;
         %let _INPUT_connect = ;
         %let _INPUT_engine = ;
         %let _INPUT_memtype = DATA;
         %let _INPUT_options = %nrquote();
         %let _INPUT_alter = %nrquote();
         %let _INPUT_path = %nrquote(/Extract_A5TM814S.BE000S3Q%(WorkTable%));
         %let _INPUT_type = 1;
         %let _INPUT_label = %nrquote();
         
         %let _INPUT0 = work.W1CLZ92T;
         %let _INPUT0_connect = ;
         %let _INPUT0_engine = ;
         %let _INPUT0_memtype = DATA;
         %let _INPUT0_options = %nrquote();
         %let _INPUT0_alter = %nrquote();
         %let _INPUT0_path = %nrquote(/Extract_A5TM814S.BE000S3Q%(WorkTable%));
         %let _INPUT0_type = 1;
         %let _INPUT0_label = %nrquote();
         
         %let _OUTPUT_count = 1; 
         %let _OUTPUT = work.T_ADM_PR_RFD_IIT_SETOF11;
         %let _OUTPUT_connect = ;
         %let _OUTPUT_engine = ;
         %let _OUTPUT_memtype = DATA;
         %let _OUTPUT_options = %nrquote();
         %let _OUTPUT_alter = %nrquote();
         %let _OUTPUT_path = %nrquote(/Set_of_11_test2_OUTPUT0_A5TM814S.BE000S3R%(WorkTable%));
         %let _OUTPUT_type = 1;
         %let _OUTPUT_label = %nrquote();
         /* List of target columns to keep  */ 
         %let _OUTPUT_keep = id_internal AM_IIT_REFUND_CURR AM_IIT_REFUND_TOT AM_IIT_REFUND_AVE 
                 IN_IIT_REFUND_NC AM_IIT_REFUND_STD AM_IIT_REFUND_DEVN 
                 AM_IIT_REFUND_RATE RO_IIT_REFUND_PPT IN_IIT_REFUND_CURR 
                 IN_IIT_REFUND_PREV IN_IIT_REFUND_START;
         
         %let _OUTPUT0 = work.T_ADM_PR_RFD_IIT_SETOF11;
         %let _OUTPUT0_connect = ;
         %let _OUTPUT0_engine = ;
         %let _OUTPUT0_memtype = DATA;
         %let _OUTPUT0_options = %nrquote();
         %let _OUTPUT0_alter = %nrquote();
         %let _OUTPUT0_path = %nrquote(/Set_of_11_test2_OUTPUT0_A5TM814S.BE000S3R%(WorkTable%));
         %let _OUTPUT0_type = 1;
         %let _OUTPUT0_label = %nrquote();
         /* List of target columns to keep  */ 
         %let _OUTPUT0_keep = id_internal AM_IIT_REFUND_CURR AM_IIT_REFUND_TOT AM_IIT_REFUND_AVE 
                 IN_IIT_REFUND_NC AM_IIT_REFUND_STD AM_IIT_REFUND_DEVN 
                 AM_IIT_REFUND_RATE RO_IIT_REFUND_PPT IN_IIT_REFUND_CURR 
                 IN_IIT_REFUND_PREV IN_IIT_REFUND_START;
         
         
         proc datasets lib=work nolist nowarn memtype = (data view);
            delete T_ADM_PR_RFD_IIT_SETOF11;
         quit;
         
         
         /* List of target columns to keep  */ 
         %let _keep = id_internal AM_IIT_REFUND_CURR AM_IIT_REFUND_TOT AM_IIT_REFUND_AVE 
                 IN_IIT_REFUND_NC AM_IIT_REFUND_STD AM_IIT_REFUND_DEVN 
                 AM_IIT_REFUND_RATE RO_IIT_REFUND_PPT IN_IIT_REFUND_CURR 
                 IN_IIT_REFUND_PREV IN_IIT_REFUND_START;
         /* List of target columns to keep  */ 
         %let keep = id_internal AM_IIT_REFUND_CURR AM_IIT_REFUND_TOT AM_IIT_REFUND_AVE 
                 IN_IIT_REFUND_NC AM_IIT_REFUND_STD AM_IIT_REFUND_DEVN 
                 AM_IIT_REFUND_RATE RO_IIT_REFUND_PPT IN_IIT_REFUND_CURR 
                 IN_IIT_REFUND_PREV IN_IIT_REFUND_START;
         /*options mprint mlogic;*/
         %let stat1=curr;
         %let stat2=prev;
         
         %put etls_jobName as &etls_jobName;
         %put %scan(&etls_jobname,2,'_');
         %let curr_table = %scan(&etls_jobname,2,'_');
         %put  current table is: &curr_table;
         
         PROC CONTENTS DATA=&_INPUT OUT=CONTENTS(KEEP=NAME) NOPRINT;
         RUN;
         
         proc sql noprint;
         select strip(put(count(NAME),32.)) into :col_cnt from CONTENTS 
         	where UPCASE(NAME) NOT IN("ID_INTERNAL" "PERIOD");
         select distinct trim(NAME) into :var1-:var&col_cnt from CONTENTS  
         	where UPCASE(NAME) NOT IN("ID_INTERNAL" "PERIOD");
         quit;%put &var1;
         
         %macro all_period(source=);
         proc means data=&source NOPRINT;
         var %do i = 1 %to &col_cnt;
         	 &&var&i
         	%end;;
         class ID_INTERNAL;
         output out=work.data_4ya (where=(id_internal ne .) drop= _type_ _freq_ ) sum= %do i = 1 %to &col_cnt;
         	 am_&&var&i.._tot
         	%end;
          mean= %do i = 1 %to &col_cnt;
         	 am_&&var&i.._ave
         	%end;
          std= %do i = 1 %to &col_cnt;
         	 am_&&var&i.._std
         	%end;
          max= %do i = 1 %to &col_cnt;
         	 am_&&var&i.._max
         	%end;
          min= %do i = 1 %to &col_cnt;
         	 am_&&var&i.._min
         	%end;;
         run;
         proc sort data=work.data_4ya;
         by ID_INTERNAL;run;
         
         proc sql;
         	%do j=1 %to 2;
         		create table data_&&stat&j as
         				select id_internal,
         			%do i = 1 %to &col_cnt;
         				&&var&i. as am_&&var&i.._&&stat&j
         				%if &i ne &col_cnt %then , ;
         			%end;
         		from &source
         		where period = (&ADMS_PERIOD -1 + &j)
         		order by id_internal;
         	%end;
         quit;
         
         %mend all_period;
         %all_period(source=&_INPUT);
         
         %macro merge_all;
         data &_OUTPUT 
         	(DROP= %do i = 1 %to &col_cnt;
         	 am_&&var&i.._max
         	 am_&&var&i.._prev
         	 am_&&var&i.._min
         	 tmp_am_&&var&i.._curr
         	 tmp_am_&&var&i.._prev
         	%end;);
         merge work.data_4ya work.data_curr (in=curr) work.data_prev;
         by ID_INTERNAL;
         if curr;
         %do i = 1 %to &col_cnt;
         
         	if am_&&var&i.._curr = am_&&var&i.._prev then in_&&var&i.._nc='1'; else in_&&var&i.._nc='0';
         	
           	am_&&var&i.._devn = am_&&var&i.._curr - am_&&var&i.._ave;
         
         /* Cannot use Ratio function, should impute Curr & Prev separately */
            if am_&&var&i.._curr =. or am_&&var&i.._prev=. then am_&&var&i.._rate = .;
         		else do;
         				if am_&&var&i.._prev = 0 then tmp_am_&&var&i.._prev = 1;else tmp_am_&&var&i.._prev = am_&&var&i.._prev;
         				if am_&&var&i.._curr = 0 then tmp_am_&&var&i.._curr = 1;else tmp_am_&&var&i.._curr = am_&&var&i.._curr;
         				am_&&var&i.._rate = (tmp_am_&&var&i.._curr - tmp_am_&&var&i.._prev)/tmp_am_&&var&i.._prev;
         		end;
         
         /*  	else am_&&var&i.._rate =RATIO((am_&&var&i.._curr - am_&&var&i.._prev), am_&&var&i.._prev);*/
         
           	ro_&&var&i.._ppt = RATIO(am_&&var&i.._curr , am_&&var&i.._ave );
         
           	if am_&&var&i.._prev in (0,.) then in_&&var&i.._prev = '0'; else in_&&var&i.._prev='1';
         
           	if am_&&var&i.._curr in (0,.) then in_&&var&i.._curr = '0'; else in_&&var&i.._curr = '1';
          
          	if (am_&&var&i.._max in (0,.) and am_&&var&i.._min in (0,.)) then in_&&var&i.._start = '0'; else in_&&var&i.._start ='1';
          
         %end;
         run;
         %mend merge_all;
         %merge_all;
         
         proc delete data=work.data_4ya work.data_curr work.data_prev CONTENTS;
         run;
         
         
         %rcSet(&syserr); 
         %rcSet(&sysrc); 
         %rcSet(&sqlrc); 
         
         
         
         /** Step end Set_of_11_test2 **/
         
         /*==========================================================================* 
          * Step:            Join                                  A5TM814S.BP00157Y * 
          * Transform:       Join                                                    * 
          * Description:                                                             * 
          *                                                                          * 
          * Source Tables:   Set_of_11_test2_OUTPUT0 -             A5TM814S.BE000S3R * 
          *                   work.T_ADM_PR_RFD_IIT_SETOF11                          * 
          *                  BASE_ADM_PR_RFD_IIT -                 A5TM814S.BH000MK3 * 
          *                   UDPADMS.BASE_ADM_PR_RFD_IIT                            * 
          * Target Table:    Join - work.W1LCGA9H                  A5TM814S.BE000S3S * 
          *==========================================================================*/ 
         
         %let transformID = %quote(A5TM814S.BP00157Y);
         %let trans_rc = 0;
         %let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 
         
         %let etls_recCheckExist = 0; 
         %let etls_recnt = 0; 
         %macro etls_recordCheck; 
            %let etls_recCheckExist = %eval(%sysfunc(exist(work.T_ADM_PR_RFD_IIT_SETOF11, DATA)) or 
                  %sysfunc(exist(work.T_ADM_PR_RFD_IIT_SETOF11, VIEW))); 
            
            %if (&etls_recCheckExist) %then
            %do;
               %local etls_syntaxcheck; 
               %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
               /* Turn off syntaxcheck option to perform following steps  */ 
               options nosyntaxcheck;
               
               proc contents data = work.T_ADM_PR_RFD_IIT_SETOF11 out = work.etls_contents(keep = nobs) noprint; 
               run; 
               
               data _null_; 
                  set work.etls_contents (obs = 1); 
                  call symput("etls_recnt", left(put(nobs,32.))); 
               run;
               
               proc datasets lib = work nolist nowarn memtype = (data view);
                  delete etls_contents;
               quit;
               
               /* Reset syntaxcheck option to previous setting  */ 
               options &etls_syntaxcheck; 
            %end;
         %mend etls_recordCheck;
         %etls_recordCheck;
         
         %global etls_sql_pushDown;
         %let etls_sql_pushDown = -1;
         option DBIDIRECTEXEC;
         
         proc datasets lib = work nolist nowarn memtype = (data view);
            delete W1LCGA9H;
         quit;
         
         proc sql;
            create table work.W1LCGA9H as
            select
               BASE_ADM_PR_RFD_IIT.id_internal length = 8   
                  format = 17.
                  informat = 17.
                  label = 'System generated number that uniquely identifies the Tax entity',
               BASE_ADM_PR_RFD_IIT.cd_tax length = 8   
                  format = 12.
                  informat = 12.
                  label = 'cd_tax',
               T_ADM_PR_RFD_IIT_SETOF11.AM_IIT_REFUND_CURR length = 8   
                  format = 20.2
                  informat = 20.2
                  label = 'IIT Tax Type Refund for Current YA',
               T_ADM_PR_RFD_IIT_SETOF11.AM_IIT_REFUND_TOT length = 8   
                  format = 20.2
                  informat = 20.2
                  label = 'Total IIT Tax Type Refund for the last 4 YA',
               T_ADM_PR_RFD_IIT_SETOF11.AM_IIT_REFUND_AVE length = 8   
                  format = 20.2
                  informat = 20.2
                  label = 'Ave IIT Tax Type Refund for the last 4 YA',
               T_ADM_PR_RFD_IIT_SETOF11.IN_IIT_REFUND_NC length = 1   
                  label = 'No Change Indicator in IIT Tax Type Refund from Previous YA',
               T_ADM_PR_RFD_IIT_SETOF11.AM_IIT_REFUND_STD length = 8   
                  format = 20.2
                  informat = 20.2
                  label = 'Variation in IIT Tax Type Refund for the last 4 YA',
               T_ADM_PR_RFD_IIT_SETOF11.AM_IIT_REFUND_DEVN length = 8   
                  label = 'Deviation of Current IIT Tax Type Refund from Mean in the last 4 YA',
               T_ADM_PR_RFD_IIT_SETOF11.AM_IIT_REFUND_RATE length = 8   
                  label = 'Rate of Change in IIT Tax Type Refund from Previous YA',
               T_ADM_PR_RFD_IIT_SETOF11.RO_IIT_REFUND_PPT length = 8   
                  label = 'Proportion of IIT Tax Type Refund vs Average of the last 4 YA',
               T_ADM_PR_RFD_IIT_SETOF11.IN_IIT_REFUND_CURR length = 1   
                  label = 'IIT Tax Type Refund Indicator (Current YA)',
               T_ADM_PR_RFD_IIT_SETOF11.IN_IIT_REFUND_PREV length = 1   
                  label = 'IIT Tax Type Refund Indicator (Previous YA)',
               T_ADM_PR_RFD_IIT_SETOF11.IN_IIT_REFUND_START length = 1   
                  label = 'IIT Tax Type Refund Indicator (Last 4 YA)',
               BASE_ADM_PR_RFD_IIT.nm_src_system length = 50   
                  format = $50.
                  informat = $50.
                  label = 'nm_src_system',
               1+ &curr_ya - &adms_period as yr_adms_ya length = 8   
                  format = 11.
                  informat = 11.
                  label = 'yr_adms_ya'
            from
               work.T_ADM_PR_RFD_IIT_SETOF11 right join 
               UDPADMS.BASE_ADM_PR_RFD_IIT
               (
                  WHERE = ((&curr_ya - YA +1)=&ADMS_PERIOD)
               )
                  on
                  (
                     T_ADM_PR_RFD_IIT_SETOF11.id_internal = BASE_ADM_PR_RFD_IIT.id_internal
                  )
            ;
         quit;
         
         %global etls_sql_pushDown;
         %let etls_sql_pushDown = &sys_sql_ip_all;
         
         %rcSet(&sqlrc); 
         
         
         
         /** Step end Join **/
         
         /*==========================================================================* 
          * Step:            Table Loader                          A5TM814S.BP00157Z * 
          * Transform:       Table Loader (Version 2.1)                              * 
          * Description:                                                             * 
          *                                                                          * 
          * Source Table:    Join - work.W1LCGA9H                  A5TM814S.BE000S3S * 
          * Target Table:    T_ADM_PR_RFD_IIT -                    A5TM814S.BH000MK4 * 
          *                   UDPADMS.T_ADM_PR_RFD_IIT                               * 
          *==========================================================================*/ 
         
         %let transformID = %quote(A5TM814S.BP00157Z);
         %let trans_rc = 0;
         %let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 
         
         %let SYSLAST = %nrquote(work.W1LCGA9H); 
         
         %global etls_sql_pushDown;
         %let etls_sql_pushDown = -1;
         option DBIDIRECTEXEC;
         
         %global etls_tableExist;
         %global etls_numIndex;
         %global etls_lastTable;
         %let etls_tableExist = -1; 
         %let etls_numIndex = -1; 
         %let etls_lastTable = &SYSLAST; 
         
         /*---- Define load data macro  ----*/ 
         
         /* --------------------------------------------------------------
            Load Technique Selection: AppendToExisting - AppendProc
            Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
            Additional options selections... 
               Set unmapped to missing on updates: false 
            -------------------------------------------------------------- */
         %macro etls_loader;
         
            %let etls_tableOptions = ;
            
            /*---- Map the columns  ----*/ 
            proc datasets lib = work nolist nowarn memtype = (data view);
               delete WESX3UH;
            quit;
            
            %put %str(NOTE: Mapping columns ...);
            proc sql;
               create view work.WESX3UH as
                  select
                     id_internal   
                        format = 14.
                        informat = 14.,
                     cd_tax   
                        format = 11.
                        informat = 11.,
                     am_iit_refund_curr   
                        format = 22.2
                        informat = 22.2,
                     am_iit_refund_tot   
                        format = 22.2
                        informat = 22.2,
                     am_iit_refund_ave   
                        format = 22.2
                        informat = 22.2,
                     in_iit_refund_nc   
                        format = $1.
                        informat = $1.,
                     am_iit_refund_std   
                        format = 22.2
                        informat = 22.2,
                     am_iit_refund_devn   
                        format = 22.2
                        informat = 22.2,
                     am_iit_refund_rate   
                        format = 22.2
                        informat = 22.2,
                     ro_iit_refund_ppt   
                        format = 22.2
                        informat = 22.2,
                     in_iit_refund_curr   
                        format = $1.
                        informat = $1.,
                     in_iit_refund_prev   
                        format = $1.
                        informat = $1.,
                     in_iit_refund_start   
                        format = $1.
                        informat = $1.,
                     nm_src_system,
                     yr_adms_ya
               from &etls_lastTable
               ;
            quit;
            
            %let SYSLAST = work.WESX3UH;
            
            %let etls_lastTable = &SYSLAST; 
            %let etls_tableOptions = ; 
            
            /* Determine if the target table exists  */ 
            %let etls_tableExist = %eval(%sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, DATA)) or 
                  %sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, VIEW))); 
            
            /*---- Create a new table  ----*/ 
            %if (&etls_tableExist eq 0) %then 
            %do;  /* if table does not exist  */ 
            
               %put %str(NOTE: Creating table ...);
               
               data UDPADMS.T_ADM_PR_RFD_IIT;
                  attrib id_internal length = 8
                     format = 14.
                     informat = 14.
                     label = 'id_internal'; 
                  attrib cd_tax length = 8
                     format = 11.
                     informat = 11.
                     label = 'cd_tax'; 
                  attrib am_iit_refund_curr length = 8
                     format = 22.2
                     informat = 22.2
                     label = 'am_iit_refund_curr'; 
                  attrib am_iit_refund_tot length = 8
                     format = 22.2
                     informat = 22.2
                     label = 'am_iit_refund_tot'; 
                  attrib am_iit_refund_ave length = 8
                     format = 22.2
                     informat = 22.2
                     label = 'am_iit_refund_ave'; 
                  attrib in_iit_refund_nc length = $1
                     format = $1.
                     informat = $1.
                     label = 'in_iit_refund_nc'; 
                  attrib am_iit_refund_std length = 8
                     format = 22.2
                     informat = 22.2
                     label = 'am_iit_refund_std'; 
                  attrib am_iit_refund_devn length = 8
                     format = 22.2
                     informat = 22.2
                     label = 'am_iit_refund_devn'; 
                  attrib am_iit_refund_rate length = 8
                     format = 22.2
                     informat = 22.2
                     label = 'am_iit_refund_rate'; 
                  attrib ro_iit_refund_ppt length = 8
                     format = 22.2
                     informat = 22.2
                     label = 'ro_iit_refund_ppt'; 
                  attrib in_iit_refund_curr length = $1
                     format = $1.
                     informat = $1.
                     label = 'in_iit_refund_curr'; 
                  attrib in_iit_refund_prev length = $1
                     format = $1.
                     informat = $1.
                     label = 'in_iit_refund_prev'; 
                  attrib in_iit_refund_start length = $1
                     format = $1.
                     informat = $1.
                     label = 'in_iit_refund_start'; 
                  attrib nm_src_system length = $50
                     format = $50.
                     informat = $50.
                     label = 'nm_src_system'; 
                  attrib yr_adms_ya length = 8
                     format = 11.
                     informat = 11.
                     label = 'yr_adms_ya'; 
                  call missing(of _all_);
                  stop;
               run;
               
               %rcSet(&syserr); 
               
            %end;  /* if table does not exist  */ 
            
            /*---- Append  ----*/ 
            %put %str(NOTE: Appending data ...);
            
            proc append base = UDPADMS.T_ADM_PR_RFD_IIT 
               data = &etls_lastTable (&etls_tableOptions)  force ; 
             run; 
            
            %rcSet(&syserr); 
            
            proc datasets lib = work nolist nowarn memtype = (data view);
               delete WESX3UH;
            quit;
            
         %mend etls_loader;
         %etls_loader;
         
         %let etls_recCheckExist = 0; 
         %let etls_recnt = 0; 
         %macro etls_recordCheck; 
            %let etls_recCheckExist = %eval(%sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, DATA)) or 
                  %sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, VIEW))); 
            
            %if (&etls_recCheckExist) %then
            %do;
               %local etls_syntaxcheck; 
               %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
               /* Turn off syntaxcheck option to perform following steps  */ 
               options nosyntaxcheck;
               
               proc contents data = UDPADMS.T_ADM_PR_RFD_IIT out = work.etls_contents(keep = nobs) noprint; 
               run; 
               
               data _null_; 
                  set work.etls_contents (obs = 1); 
                  call symput("etls_recnt", left(put(nobs,32.))); 
               run;
               
               proc datasets lib = work nolist nowarn memtype = (data view);
                  delete etls_contents;
               quit;
               
               /* Reset syntaxcheck option to previous setting  */ 
               options &etls_syntaxcheck; 
            %end;
         %mend etls_recordCheck;
         %etls_recordCheck;
         
         
         
         /** Step end Table Loader **/
         
         %let etls_endTime = %sysfunc(datetime(),datetime.);
         
         
         
         /**  Job end POPULATE_TARGET_T_ADM_PR_RFD_IIT **/
         
         /* Reset jobid and name */
         %let jobID = %quote(A5TM814S.BN000MIN);
         %let etls_jobName = %nrquote(POPULATE_ALL_TARGET_T_ADM_PR_RFD_IIT);
         
      %mend etls_jobWESX3HK; 
      
      %etls_jobWESX3HK; 
      
      %let handleName = %etls_getHandle(statusTable=&etls_statusTable,
         handleVariable=etls_handleName, row=&&&etls_controlName);
         
      %let job_rc&handleName. = &job_rc; 
      
      %etls_freeHandle(statusTable=&etls_statusTable, statusVariable=etls_status, 
         handleVariable=etls_handleName, handleName="&handleName", 
         startTimeVariable=etls_startTime, endTimeVariable=etls_endTime, signoff=0, 
         returnCodeVariable=etls_jobRC, returnCodeMacroVariable=job_rc&handleName., setMainJobRc=1); 
         
   %mend etls_processToLoopWESX3HT;
   
   %local etls_controlTable etls_statusTable etls_controlName 
      etls_processesRunning etls_maxProcesses etls_parameterTable 
      etls_additionalSignonOptions etls_signonRetries;
   %let etls_controlName = L3_; 
   %let etls_statusTable = work.LOOP_STATUS; 
   %let etls_parameterTable = work.WESX3V8; 
   %let &etls_controlName = 0;
   %let etls_controlTable = ads_stg.T_ADM_CTL_LOOP_ITER;
   
   %put %str(NOTE: Creating status table...);
   data &etls_statusTable 
      (keep = etls_handleName etls_machineId etls_startTime etls_endTime etls_status 
              etls_jobRC
      );
      attrib etls_handleName length = $32
         label = 'Name of handle to remote session'; 
      attrib etls_machineId length = $32
         label = 'Name of machine executing the task'; 
      attrib etls_startTime length = 8
         format = nldatmap.
         label = 'Start time of task'; 
      attrib etls_endTime length = 8
         format = nldatmap.
         label = 'End time of task'; 
      attrib etls_status length = $32
         label = 'Current status of task'; 
      attrib etls_jobRC length = 8
         label = 'Return code of task'; 
      set &etls_controlTable(WHERE=(NM_TARGET_TABLE='T_ADM_PR_RFD_IIT'));
   run;
   
   %rcSet(&syserr); 
   
   %put %str(NOTE: Creating parameter table...);
   proc sql; 
      create table &etls_parameterTable as 
         select qt_iter as ADMS_PERIOD 
         from &etls_controlTable(WHERE=(NM_TARGET_TABLE='T_ADM_PR_RFD_IIT')); 
   quit; 
   
   %rcSet(&sqlrc); 
   
   /* Get the number of times to iterate from the number of rows in the source  */ 
   /*  table                                                                    */ 
   proc sql noprint; 
      select count(*) into :&etls_controlName._max from &etls_statusTable;
      %let &etls_controlName._max = &&&etls_controlName._max;
   quit;
   
   %rcSet(&sqlrc); 
   
   %let etls_maxProcesses = 1; 
   
   %if (&etls_maxProcesses > 0) %then 
   %do; 
      %do %until (&&&etls_controlName ge &&&etls_controlName._max); 
      
         %let etls_lastLoopPtr = &&&etls_controlName;
         
         %let etls_processesRunning = 0; 
         
         %do %while(&etls_processesRunning lt &&&etls_controlName._max 
            and &etls_processesRunning lt &etls_maxProcesses 
            and &&&etls_controlName lt &&&etls_controlName._max);
            
            %let &etls_controlName = %eval(&&&etls_controlName+1);
            
            %let job_rcLast=&job_rc; 
            
            %etls_createHandle(statusTable=&etls_statusTable,
                               statusVariable=etls_status,
                               handleVariable=etls_handleName,
                               handlePrefix=&etls_controlName,
                               statusSetting="Running",
                               row=&&&etls_controlName,
                               machineVariable=etls_machineId,
                               startTimeVariable=etls_startTime,
                               signon=0,
                               useGrid=0);
            
         %let etls_processesRunning = 1; 
         %etls_processToLoopWESX3HT(parameterTable=&etls_parameterTable, row=&&&etls_controlName,
            handleName=%etls_getHandle(statusTable=&etls_statusTable,
            handleVariable=etls_handleName, row=&&&etls_controlName)); 
         
         /* Reset main Job_RC and Trans_RC to max return code of all iterations */ 
         %let job_rcThisIter=&job_rc; 
         %let job_rc=&job_rcLast; 
         %let trans_rc=&job_rcLast; 
         %rcSet(&job_rcThisIter); 
      %end; 
      
   %end; 
   
%end;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WESX3V8;
quit;

%mend etls_loopWESX3HJ; 

%etls_loopWESX3HJ; 



/** Step end Loop **/

/*==========================================================================* 
 * Step:            Loop End                              A5TM814S.BP0013P1 * 
 * Transform:       Loop End                                                * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5TM814S.BP0013P1);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 



/** Step end Loop End **/

/*==========================================================================* 
 * Step:            UDP_CD_Validation_and_DT_Imputes      A5TM814S.BP0015D9 * 
 * Transform:       UDP_CD_Validation_and_DT_Imputes                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    T_ADM_PR_RFD_IIT -                    A5TM814S.BH000MK4 * 
 *                   UDPADMS.T_ADM_PR_RFD_IIT                               * 
 * Target Table:    T_ADM_PR_RFD_IIT -                    A5TM814S.BH000L5R * 
 *                   ads_tgt.T_ADM_PR_RFD_IIT                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5TM814S.BP0015D9);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, DATA)) or 
         %sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = UDPADMS.T_ADM_PR_RFD_IIT out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(UDPADMS.T_ADM_PR_RFD_IIT); 

%let _INPUT_count = 1; 
%let _INPUT = UDPADMS.T_ADM_PR_RFD_IIT;
%let _INPUT_connect = null;
%let _INPUT_engine = BASE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/Extract/T_ADM_PR_RFD_IIT%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT0 = UDPADMS.T_ADM_PR_RFD_IIT;
%let _INPUT0_connect = null;
%let _INPUT0_engine = BASE;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/Extract/T_ADM_PR_RFD_IIT%(Table%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = ads_tgt.T_ADM_PR_RFD_IIT;
%let _OUTPUT_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_tgt  PORT=10000
;
%let _OUTPUT_engine = HADOOP;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateTarget/T_ADM_PR_RFD_IIT%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = id_internal cd_tax am_iit_refund_curr am_iit_refund_tot 
        am_iit_refund_ave in_iit_refund_nc am_iit_refund_std 
        am_iit_refund_devn am_iit_refund_rate ro_iit_refund_ppt 
        in_iit_refund_curr in_iit_refund_prev in_iit_refund_start yr_adms_ya 
        nm_src_system dt_adms_updated dt_adms_created yr_adms_year 
        mt_adms_month;

%let _OUTPUT0 = ads_tgt.T_ADM_PR_RFD_IIT;
%let _OUTPUT0_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_tgt  PORT=10000
;
%let _OUTPUT0_engine = HADOOP;
%let _OUTPUT0_memtype = DATA;
%let _OUTPUT0_options = %nrquote();
%let _OUTPUT0_alter = %nrquote();
%let _OUTPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateTarget/T_ADM_PR_RFD_IIT%(Table%));
%let _OUTPUT0_type = 1;
%let _OUTPUT0_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT0_keep = id_internal cd_tax am_iit_refund_curr am_iit_refund_tot 
        am_iit_refund_ave in_iit_refund_nc am_iit_refund_std 
        am_iit_refund_devn am_iit_refund_rate ro_iit_refund_ppt 
        in_iit_refund_curr in_iit_refund_prev in_iit_refund_start yr_adms_ya 
        nm_src_system dt_adms_updated dt_adms_created yr_adms_year 
        mt_adms_month;


%let job_status_chk = %nrquote(1);

/* List of target columns to keep  */ 
%let _keep = id_internal cd_tax am_iit_refund_curr am_iit_refund_tot 
        am_iit_refund_ave in_iit_refund_nc am_iit_refund_std 
        am_iit_refund_devn am_iit_refund_rate ro_iit_refund_ppt 
        in_iit_refund_curr in_iit_refund_prev in_iit_refund_start yr_adms_ya 
        nm_src_system dt_adms_updated dt_adms_created yr_adms_year 
        mt_adms_month;
/* List of target columns to keep  */ 
%let keep = id_internal cd_tax am_iit_refund_curr am_iit_refund_tot 
        am_iit_refund_ave in_iit_refund_nc am_iit_refund_std 
        am_iit_refund_devn am_iit_refund_rate ro_iit_refund_ppt 
        in_iit_refund_curr in_iit_refund_prev in_iit_refund_start yr_adms_ya 
        nm_src_system dt_adms_updated dt_adms_created yr_adms_year 
        mt_adms_month;
%macro CD_VALID_DT_IMPUTE;
/*	%global ADMS_RUNDATE;*/
/*	%let ADMS_RUNDATE='29FEB2020'd;*/
/*	%put &ADMS_RUNDATE. date9.;*/

	/*	Define ADMS_YR and ADMS_MTH values to be used for default values and
		for deletion purposes.*/
	%global CURR_DATETIME CURR_ADMS_YR CURR_ADMS_MTH; 
	%let CURR_DATETIME = %sysfunc(datetime(),datetime20.);
	%let CURR_ADMS_YR = %sysfunc(year(&ADMS_RUNDATE));
	%let CURR_ADMS_MTH = %sysfunc(month(&ADMS_RUNDATE));

	/*Check if loop jobs were successful*/
	%if &job_status_chk eq 1 %then %do;

		proc sql noprint;
			select *
				from LOOP_STATUS
				where etls_jobRC ne 0
			;
		quit;

		%if &sqlobs ne 0 %then %abort;
	%end;
	/*End of Check if loop jobs were successful*/

/*	%let CURR_DATETIME = %sysfunc(int(%sysfunc(datetime())));*/
	%let _OUT = %scan(&_OUTPUT,2,'.');

	/*For Date impute codes*/
	proc contents data = &_OUTPUT out = SRC_TBL_DTLS(where = (format in("DATE","DATETIME")) keep = name format) noprint;
	run;

	proc sql noprint;
		select cats(name,",",format) into :DT_COL_LIST separated by ' ' 
			from SRC_TBL_DTLS 
		;
	quit;
	%let dt_imp_cnt = &sqlobs;
	/*For Date impute codes*/

	/*Code validation codes*/
	proc sql noprint;
		select nm_code_var, nm_code_table, nm_code_table_source into 
			:cd_var_nms separated by ' ', 
			:cd_nms separated by ' ', 
			:cd_tbl_nms separated by ' '
			from ADS_STG.T_ADM_CTL_CODE_VALIDATION
			where upcase(nm_target_table) = upcase("&_OUT")
		;
	quit;
	%put &sqlobs;
	%let cd_var_cnt = &sqlobs;

	%if &cd_var_cnt ne 0 %then %do;
		%do i = 1 %to &cd_var_cnt;
			%let curr_cd_var_nm = %scan(&cd_var_nms,&i,' ');
			%let curr_cd_nm = %scan(&cd_nms,&i,' ');
			%let curr_cd_tbl_nm = %scan(&cd_tbl_nms,&i,' ');
			%if &curr_cd_tbl_nm = CT_SIMPLE %then %let curr_cd_tbl_nm = ST_CT_SIMPLE;

			data temp;
				keep start label fmtname;
				set ADS_STG.&curr_cd_tbl_nm (rename =(ct_num_cd = start ct_name = fmtname)); 
				label='***ADMS***';
				output;
				where fmtname = "&curr_cd_nm";
			run;

			proc sort data = temp nodupkey;
				by start;
			run;

			proc format cntlin = temp;
			run;

		%end;
	%end;

	data &_INPUT (drop = NM_SRC_TBL NM_SRC_FLD TX_REASON DT_ADMS_RUN_TIME)
	ADMS_ERR.&_OUT._ERR
	;
		drop IND_ERR;
		set &_INPUT;
		length IND_ERR $1 NM_SRC_TBL $65 NM_SRC_FLD $32 TX_REASON $50 
			DT_ADMS_RUN_TIME 8;
		format DT_ADMS_RUN_TIME DATETIME25.6;
			
		%let j = 1;
		%let curr = %scan(%quote(&DT_COL_LIST),&j,' ');

		%do %while(&curr ne and &dt_imp_cnt ne 0);
			%let col_nm = %scan(%quote(&curr),1,',');
			%let type = %scan(%quote(&curr),2,',');
				&col_nm = dt_impute(&col_nm,"&type");			
			%let j = %eval(&j + 1);
			%let curr = %scan(%quote(&DT_COL_LIST),&j,' ');
		%end;

		DT_ADMS_RUN_TIME = "&CURR_DATETIME"DT;
		IND_ERR = '0';	
/*		YR_ADMS_YEAR = &CURR_ADMS_YR;*/
/*		MT_ADMS_MONTH = &CURR_ADMS_MTH;*/
/*		DT_ADMS_UPDATED = "&CURR_DATETIME"DT;*/
/*		DT_ADMS_CREATED = "&CURR_DATETIME"DT;*/

		%if &cd_var_cnt ne 0 %then %do;
			%do i = 1 %to &cd_var_cnt;
				%let curr_cd_var_nm = %scan(&cd_var_nms,&i,' ');
				%let curr_cd_nm = %scan(&cd_nms,&i,' ');
				%let curr_fmt_nm = %lowcase(%scan(&cd_nms,&i,' '));
				%let curr_cd_tbl_nm = %scan(&cd_tbl_nms,&i,' ');
			
				%if &i eq 1 %then if; %else else if;
				 	put(&curr_cd_var_nm,&curr_fmt_nm..) ne '***ADMS***' then do;

						NM_SRC_TBL = cats("&curr_cd_tbl_nm",".","&curr_cd_nm");
						NM_SRC_FLD = "&curr_cd_var_nm";
						TX_REASON = "Value not in code table.";
						IND_ERR = '1';		

					end;

			%end;/*do i loop*/
		%end;

		if IND_ERR = '1' then output ADMS_ERR.&_OUT._ERR;
		output &_INPUT;
		
	run;

%exit: %mend;

%CD_VALID_DT_IMPUTE

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end UDP_CD_Validation_and_DT_Imputes **/

/*==========================================================================* 
 * Step:            UDP_Bulk_Load_Target                  A5TM814S.BP001580 * 
 * Transform:       UDP_Bulk_Load_Target                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    T_ADM_PR_RFD_IIT -                    A5TM814S.BH000MK4 * 
 *                   UDPADMS.T_ADM_PR_RFD_IIT                               * 
 * Target Table:    T_ADM_PR_RFD_IIT -                    A5TM814S.BH000L5R * 
 *                   ads_tgt.T_ADM_PR_RFD_IIT                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5TM814S.BP001580);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, DATA)) or 
         %sysfunc(exist(UDPADMS.T_ADM_PR_RFD_IIT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = UDPADMS.T_ADM_PR_RFD_IIT out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(UDPADMS.T_ADM_PR_RFD_IIT); 

%let _INPUT_count = 1; 
%let _INPUT = UDPADMS.T_ADM_PR_RFD_IIT;
%let _INPUT_connect = null;
%let _INPUT_engine = BASE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/Extract/T_ADM_PR_RFD_IIT%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT0 = UDPADMS.T_ADM_PR_RFD_IIT;
%let _INPUT0_connect = null;
%let _INPUT0_engine = BASE;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/Extract/T_ADM_PR_RFD_IIT%(Table%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = ads_tgt.T_ADM_PR_RFD_IIT;
%let _OUTPUT_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_tgt  PORT=10000
;
%let _OUTPUT_engine = HADOOP;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateTarget/T_ADM_PR_RFD_IIT%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = id_internal cd_tax am_iit_refund_curr am_iit_refund_tot 
        am_iit_refund_ave in_iit_refund_nc am_iit_refund_std 
        am_iit_refund_devn am_iit_refund_rate ro_iit_refund_ppt 
        in_iit_refund_curr in_iit_refund_prev in_iit_refund_start yr_adms_ya 
        nm_src_system dt_adms_updated dt_adms_created yr_adms_year 
        mt_adms_month;

%let _OUTPUT0 = ads_tgt.T_ADM_PR_RFD_IIT;
%let _OUTPUT0_connect =  SERVER="10.7.78.52" AUTHDOMAIN="Hp_auth"  SCHEMA=ads_tgt  PORT=10000
;
%let _OUTPUT0_engine = HADOOP;
%let _OUTPUT0_memtype = DATA;
%let _OUTPUT0_options = %nrquote();
%let _OUTPUT0_alter = %nrquote();
%let _OUTPUT0_path = %nrquote(/ADMS_UDP/ADMS_UDP_DATA/PopulateTarget/T_ADM_PR_RFD_IIT%(Table%));
%let _OUTPUT0_type = 1;
%let _OUTPUT0_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT0_keep = id_internal cd_tax am_iit_refund_curr am_iit_refund_tot 
        am_iit_refund_ave in_iit_refund_nc am_iit_refund_std 
        am_iit_refund_devn am_iit_refund_rate ro_iit_refund_ppt 
        in_iit_refund_curr in_iit_refund_prev in_iit_refund_start yr_adms_ya 
        nm_src_system dt_adms_updated dt_adms_created yr_adms_year 
        mt_adms_month;



/* List of target columns to keep  */ 
%let _keep = id_internal cd_tax am_iit_refund_curr am_iit_refund_tot 
        am_iit_refund_ave in_iit_refund_nc am_iit_refund_std 
        am_iit_refund_devn am_iit_refund_rate ro_iit_refund_ppt 
        in_iit_refund_curr in_iit_refund_prev in_iit_refund_start yr_adms_ya 
        nm_src_system dt_adms_updated dt_adms_created yr_adms_year 
        mt_adms_month;
/* List of target columns to keep  */ 
%let keep = id_internal cd_tax am_iit_refund_curr am_iit_refund_tot 
        am_iit_refund_ave in_iit_refund_nc am_iit_refund_std 
        am_iit_refund_devn am_iit_refund_rate ro_iit_refund_ppt 
        in_iit_refund_curr in_iit_refund_prev in_iit_refund_start yr_adms_ya 
        nm_src_system dt_adms_updated dt_adms_created yr_adms_year 
        mt_adms_month;
options minoperator;

%macro Bulk_Load_Target / mindelimiter = ' ';
	%let __OUT = %scan(&_OUTPUT,2,.);
	%let CHK_DT  = %sysfunc(datetime(),datetime20.);
	%let CURR_DATETIME = %bquote("&CHK_DT"dt);
	%let CURR_ADMS_YR = %sysfunc(year(&ADMS_RUNDATE));
	%let CURR_ADMS_MTH = %sysfunc(month(&ADMS_RUNDATE));

	%IF &__OUT in &TGT_NO_PARTITION_LIST or &__OUT in &TGT_REPLACE_LIST %THEN
		%DO;
			/*	Delete / Truncate target table */
			proc sql noprint;
				connect to Hadoop
					( 
					&UDP_Connect_Tgt
					);
				select cnt into :CNT_B4 from connection to Hadoop
					(
				select count(*) as cnt from &UDP_DB_AND_SCHEMA_TGT.&__OUT
					);
/*					execute */
/*					( */
/*					alter table &UDP_DB_AND_SCHEMA_TGT.&__OUT set tblproperties('EXTERNAL'='FALSE')*/
/**/
/*					) by Hadoop;*/
				execute 
					( 
					truncate table &UDP_DB_AND_SCHEMA_TGT.&__OUT 

					) by Hadoop;
				disconnect from Hadoop;
			quit;

			%put "&CNT_B4";

			proc contents data = &_OUTPUT out = output_tbl_dtls noprint;
			run;

			proc sort data = output_tbl_dtls;
				by varnum;
			run;

			proc sql noprint;
				select 
					case 
						when lowcase(name) = 'dt_adms_updated' then "&CURR_DATETIME"
						when lowcase(name) = 'dt_adms_created' then "&CURR_DATETIME"
						else name 
					end
				into :ALL_NMS separated by ','
					from output_tbl_dtls
				;
			quit;

			proc sql;
				insert into &UDP_DB_AND_SCHEMA_TGT.&__OUT. select &ALL_NMS from &_INPUT
				;
			quit;

			proc sql noprint;
				connect to Hadoop
					( 
					&UDP_Connect_Tgt
					);
				select cnt into :CNT_AFTER from connection to Hadoop
					(
				select count(*) as cnt from &UDP_DB_AND_SCHEMA_TGT.&__OUT
					);
					Quit;

/*					proc sql noprint;*/
/*				connect to Hadoop*/
/*					( */
/*					&UDP_Connect_Tgt*/
/*					);*/				 
/*				execute */
/*					( */
/*					alter table &UDP_DB_AND_SCHEMA_TGT.&__OUT set tblproperties('EXTERNAL'='TRUE')*/
/**/
/*					) by Hadoop;*/
/*				disconnect from Hadoop;*/
/*			quit;*/
				%put "&CNT_AFTER";
		%END;
	%ELSE
		%DO;
			/*	Delete / Truncate Snapshot if snapshot is already in target table */
			%put "To be updated if required";

			proc sql noprint;
				connect to Hadoop
					( 
					&UDP_Connect_Tgt
					);
				select cnt into :CNT_B4 from connection to Hadoop
					(
				select count(*) as cnt from &UDP_DB_AND_SCHEMA_TGT.&__OUT where yr_adms_year = &CURR_ADMS_YR. and mt_adms_month = &CURR_ADMS_MTH.
					);
/*				execute */
/*					( */
/*					alter table &UDP_DB_AND_SCHEMA_TGT.TMP_&__OUT. set tblproperties('EXTERNAL'='FALSE')*/
/**/
/*					) by Hadoop;*/
				execute 
					( 
					truncate table &UDP_DB_AND_SCHEMA_TGT.TMP_&__OUT.

					) by Hadoop;
				disconnect from Hadoop;
			quit;

			%put "&CNT_B4";
proc contents data = &_OUTPUT out = output_tbl_dtls noprint;
run;

proc sort data = output_tbl_dtls;
	by varnum;
run;
			proc sql noprint;
				select 
					case 
						when lowcase(name) = 'yr_adms_year' then "&CURR_ADMS_YR"
						when lowcase(name) = 'mt_adms_month' then "&CURR_ADMS_MTH"
						when lowcase(name) = 'dt_adms_updated' then "&CURR_DATETIME"
						when lowcase(name) = 'dt_adms_created' then "&CURR_DATETIME"
						else name 
					end
				into :ALL_NMS separated by ','
					from output_tbl_dtls
				;
			quit;
			proc sql noprint;
				select name into : ALL_NMS_INSERT separated by ','
					from output_tbl_dtls
				;
			quit;
			proc sql;
				insert into &UDP_DB_AND_SCHEMA_TGT.TMP_&__OUT. select &ALL_NMS from &_INPUT
				;
			quit;

			proc sql noprint;
				connect to Hadoop
					( 
					&UDP_Connect_Tgt
					);
				execute 
					(insert overwrite table &_OUTPUT Partition (yr_adms_year,mt_adms_month) select &ALL_NMS_INSERT from &UDP_DB_AND_SCHEMA_TGT.TMP_&__OUT.  
					) by Hadoop;
			quit;

			proc sql noprint;
				connect to Hadoop
					( 
					&UDP_Connect_Tgt
					);
				select cnt into :CNT_AFTER from connection to Hadoop
					(
				select count(*) as cnt from &UDP_DB_AND_SCHEMA_TGT.&__OUT where yr_adms_year = &CURR_ADMS_YR. and mt_adms_month = &CURR_ADMS_MTH.
					);
					Quit;

/*					proc sql noprint;*/
/*				connect to Hadoop*/
/*					( */
/*					&UDP_Connect_Tgt*/
/*					);*/
/*				 */
/*				execute */
/*					( */
/*					alter table &UDP_DB_AND_SCHEMA_TGT.TMP_&__OUT. set tblproperties('EXTERNAL'='TRUE')*/
/**/
/*					) by Hadoop;*/
/*				disconnect from Hadoop;*/
/*			quit;*/
				%put "&CNT_AFTER";
		%END;
%mend;

%Bulk_Load_Target;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end UDP_Bulk_Load_Target **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

